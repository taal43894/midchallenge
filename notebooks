{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6e551ca0",
   "metadata": {
    "id": "a2jji3LQ0LAp",
    "papermill": {
     "duration": 0.066324,
     "end_time": "2021-10-03T04:38:42.072114",
     "exception": false,
     "start_time": "2021-10-03T04:38:42.005790",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Manning liveProject: Deploy DL Model on Web & Mobile Using TensorFlow\n",
    "---\n",
    "## Milestone 1: Build an image classifier\n",
    "* ResNet50\n",
    "* MobileNetV2\n",
    "* MobileNetV2: fine-tuned\n",
    "\n",
    "## Solutions Notebook\n",
    "---\n",
    "#### Date updated:  20-Sep-2021\n",
    "#### Author:  Nidhin Pattaniyil & Reshama Shaikh\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5e1dcb02",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "8LRWAJYt4jv8",
    "outputId": "582db96b-b8ab-4f66-b659-415462cea9fe",
    "papermill": {
     "duration": 0.075722,
     "end_time": "2021-10-03T04:38:42.213030",
     "exception": false,
     "start_time": "2021-10-03T04:38:42.137308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Today's date: 2021-10-09\n"
     ]
    }
   ],
   "source": [
    "from datetime import date\n",
    "from datetime import datetime\n",
    "\n",
    "current_date = date.today()\n",
    "print(\"Today's date:\", current_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0f91f4e2",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Q1Y5mbjxwm_-",
    "outputId": "c565dc43-c938-46a1-a1ee-6eb71f11dcd5",
    "papermill": {
     "duration": 0.069455,
     "end_time": "2021-10-03T04:38:42.346103",
     "exception": false,
     "start_time": "2021-10-03T04:38:42.276648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Start Time = 17:09:24\n"
     ]
    }
   ],
   "source": [
    "now1 = datetime.now()\n",
    "\n",
    "start_time = now1.strftime(\"%H:%M:%S\")\n",
    "print(\"Start Time =\", start_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd81b546",
   "metadata": {
    "id": "Gs5vb902xRNC",
    "papermill": {
     "duration": 0.06462,
     "end_time": "2021-10-03T04:38:42.476123",
     "exception": false,
     "start_time": "2021-10-03T04:38:42.411503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56c5378e",
   "metadata": {
    "id": "KM5tPUJ-xUxT",
    "papermill": {
     "duration": 0.065366,
     "end_time": "2021-10-03T04:38:42.606536",
     "exception": false,
     "start_time": "2021-10-03T04:38:42.541170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2e09ee02",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "KFh12cb80zbE",
    "outputId": "4200428e-7609-487e-853a-aebcfa330992",
    "papermill": {
     "duration": 0.071111,
     "end_time": "2021-10-03T04:38:42.742770",
     "exception": false,
     "start_time": "2021-10-03T04:38:42.671659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# run this once (each session) if `watermark` library is not loaded, then comment out\n",
    "#!pip install watermark tensorflow==2.3.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b0380d0c",
   "metadata": {
    "id": "KF2VkBMxzqmr",
    "papermill": {
     "duration": 0.071275,
     "end_time": "2021-10-03T04:38:42.878745",
     "exception": false,
     "start_time": "2021-10-03T04:38:42.807470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import libraries\n",
    "#import pandas as pd\n",
    "import requests\n",
    "import glob\n",
    "from io import BytesIO\n",
    "import numpy as np\n",
    "import os\n",
    "import shutil\n",
    "import pprint\n",
    "import json\n",
    "from pprint import pprint\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "efdd7e4d",
   "metadata": {
    "id": "fgQANa-S0gAQ",
    "papermill": {
     "duration": 0.073105,
     "end_time": "2021-10-03T04:38:43.020016",
     "exception": false,
     "start_time": "2021-10-03T04:38:42.946911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import IPython.display as display\n",
    "from PIL import Image\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "52f45517",
   "metadata": {
    "id": "wFtsAWFB4887",
    "papermill": {
     "duration": 1.634664,
     "end_time": "2021-10-03T04:38:44.727895",
     "exception": false,
     "start_time": "2021-10-03T04:38:43.093231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-10-09 17:09:24.402682: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcudart.so.11.0\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import pathlib\n",
    "import tensorflow_hub as hub"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "72653b1a",
   "metadata": {
    "id": "WiMSleV30kAE",
    "papermill": {
     "duration": 0.079111,
     "end_time": "2021-10-03T04:38:44.875816",
     "exception": false,
     "start_time": "2021-10-03T04:38:44.796705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import watermark\n",
    "%load_ext watermark\n",
    "#%reload_ext watermark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4b1334a7",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "LbstfaBp0qR1",
    "outputId": "c9e1b842-91ba-400e-b48a-313b905389de",
    "papermill": {
     "duration": 0.137913,
     "end_time": "2021-10-03T04:38:45.081604",
     "exception": false,
     "start_time": "2021-10-03T04:38:44.943691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python implementation: CPython\n",
      "Python version       : 3.7.10\n",
      "IPython version      : 7.27.0\n",
      "\n",
      "Compiler    : GCC 9.4.0\n",
      "OS          : Linux\n",
      "Release     : 5.4.0-1053-gcp\n",
      "Machine     : x86_64\n",
      "Processor   : x86_64\n",
      "CPU cores   : 16\n",
      "Architecture: 64bit\n",
      "\n",
      "Git hash: \n",
      "\n",
      "numpy         : 1.19.5\n",
      "tensorflow_hub: 0.9.0\n",
      "tensorflow    : 2.3.4\n",
      "watermark     : 2.2.0\n",
      "requests      : 2.25.1\n",
      "json          : 2.0.9\n",
      "PIL           : 8.3.2\n",
      "matplotlib    : 3.4.3\n",
      "IPython       : 7.27.0\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "fatal: not a git repository (or any parent up to mount point /home)\n",
      "Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).\n"
     ]
    }
   ],
   "source": [
    "# see version of system, python and libraries\n",
    "%watermark -n -v -m -g -iv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fc4c5d1a",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 35
    },
    "id": "vdGngfwTb-LH",
    "outputId": "2d340f74-06ac-4700-b982-6ad2d5289f07",
    "papermill": {
     "duration": 0.081485,
     "end_time": "2021-10-03T04:38:45.230966",
     "exception": false,
     "start_time": "2021-10-03T04:38:45.149481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.3.4'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.__version__\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60f53e28",
   "metadata": {
    "id": "kEqdRy-jl_7K",
    "papermill": {
     "duration": 0.06892,
     "end_time": "2021-10-03T04:38:45.368814",
     "exception": false,
     "start_time": "2021-10-03T04:38:45.299894",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Running GPU on Colab\n",
    "Ensure that GPU is running on this Colab notebook by following below steps.\n",
    "1. Colab Menu: Select \"Runtime\"\n",
    "2. \"Change runtime type\"\n",
    "3. Select \"Hardware Accelerator\" = GPU\n",
    "4. Save"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "36269e1f",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "nDISycD15Z0J",
    "outputId": "1033e5d6-5bf8-4c2e-8c3c-b7bbf88c0e78",
    "papermill": {
     "duration": 0.840799,
     "end_time": "2021-10-03T04:38:46.277063",
     "exception": false,
     "start_time": "2021-10-03T04:38:45.436264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-10-09 17:09:25.809429: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcuda.so.1\n",
      "2021-10-09 17:09:29.295142: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:29.296745: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 0 with properties: \n",
      "pciBusID: 0000:00:04.0 name: Tesla T4 computeCapability: 7.5\n",
      "coreClock: 1.59GHz coreCount: 40 deviceMemorySize: 14.75GiB deviceMemoryBandwidth: 298.08GiB/s\n",
      "2021-10-09 17:09:29.296870: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:29.298656: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 1 with properties: \n",
      "pciBusID: 0000:00:05.0 name: Tesla T4 computeCapability: 7.5\n",
      "coreClock: 1.59GHz coreCount: 40 deviceMemorySize: 14.75GiB deviceMemoryBandwidth: 298.08GiB/s\n",
      "2021-10-09 1"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU'),\n",
       " PhysicalDevice(name='/physical_device:GPU:1', device_type='GPU'),\n",
       " PhysicalDevice(name='/physical_device:GPU:2', device_type='GPU'),\n",
       " PhysicalDevice(name='/physical_device:GPU:3', device_type='GPU')]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "7:09:29.298757: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:29.300316: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 2 with properties: \n",
      "pciBusID: 0000:00:06.0 name: Tesla T4 computeCapability: 7.5\n",
      "coreClock: 1.59GHz coreCount: 40 deviceMemorySize: 14.75GiB deviceMemoryBandwidth: 298.08GiB/s\n",
      "2021-10-09 17:09:29.300393: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:29.301985: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 3 with properties: \n",
      "pciBusID: 0000:00:07.0 name: Tesla T4 computeCapability: 7.5\n",
      "coreClock: 1.59GHz coreCount: 40 deviceMemorySize: 14.75GiB deviceMemoryBandwidth: 298.08GiB/s\n",
      "2021-10-09 17:09:29.302048: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcudart.so.11.0\n",
      "2021-10-09 17:09:29.304980: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcublas.so.11\n",
      "2021-10-09 17:09:29.306250: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcufft.so.10\n",
      "2021-10-09 17:09:29.306594: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcurand.so.10\n",
      "2021-10-09 17:09:29.309598: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcusolver.so.10\n",
      "2021-10-09 17:09:29.310313: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcusparse.so.11\n",
      "2021-10-09 17:09:29.310470: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcudnn.so.8\n",
      "2021-10-09 17:09:29.310568: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:29.312696: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:29.314265: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:29.412532: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:29.511444: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:29.512876: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:29.513751: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:29.514636: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:29.515464: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1858] Adding visible gpu devices: 0, 1, 2, 3\n"
     ]
    }
   ],
   "source": [
    "# confirm that GPU is running\n",
    "gpus = tf.config.list_physical_devices('GPU')\n",
    "gpus"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2c787479",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 35
    },
    "id": "Cd-AUp875hQP",
    "outputId": "016ebde8-1c1c-45f1-9684-6a7254a5a521",
    "papermill": {
     "duration": 0.680695,
     "end_time": "2021-10-03T04:38:47.028997",
     "exception": false,
     "start_time": "2021-10-03T04:38:46.348302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-10-09 17:09:29.532449: I tensorflow/core/platform/profile_utils/cpu_utils.cc:104] CPU Frequency: 2199995000 Hz\n",
      "2021-10-09 17:09:29.533251: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x556880bcf3d0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:\n",
      "2021-10-09 17:09:29.533286: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version\n",
      "2021-10-09 17:09:30.226988: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.235779: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.241450: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:3"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'/device:GPU:0'"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "0.249505: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.250726: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x556882798ed0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "2021-10-09 17:09:30.250757: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\n",
      "2021-10-09 17:09:30.250763: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n",
      "2021-10-09 17:09:30.250769: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (2): Tesla T4, Compute Capability 7.5\n",
      "2021-10-09 17:09:30.250773: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (3): Tesla T4, Compute Capability 7.5\n",
      "2021-10-09 17:09:30.255243: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.256101: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 0 with properties: \n",
      "pciBusID: 0000:00:04.0 name: Tesla T4 computeCapability: 7.5\n",
      "coreClock: 1.59GHz coreCount: 40 deviceMemorySize: 14.75GiB deviceMemoryBandwidth: 298.08GiB/s\n",
      "2021-10-09 17:09:30.256207: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.257031: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 1 with properties: \n",
      "pciBusID: 0000:00:05.0 name: Tesla T4 computeCapability: 7.5\n",
      "coreClock: 1.59GHz coreCount: 40 deviceMemorySize: 14.75GiB deviceMemoryBandwidth: 298.08GiB/s\n",
      "2021-10-09 17:09:30.257119: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.258045: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 2 with properties: \n",
      "pciBusID: 0000:00:06.0 name: Tesla T4 computeCapability: 7.5\n",
      "coreClock: 1.59GHz coreCount: 40 deviceMemorySize: 14.75GiB deviceMemoryBandwidth: 298.08GiB/s\n",
      "2021-10-09 17:09:30.258107: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.258948: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 3 with properties: \n",
      "pciBusID: 0000:00:07.0 name: Tesla T4 computeCapability: 7.5\n",
      "coreClock: 1.59GHz coreCount: 40 deviceMemorySize: 14.75GiB deviceMemoryBandwidth: 298.08GiB/s\n",
      "2021-10-09 17:09:30.258995: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcudart.so.11.0\n",
      "2021-10-09 17:09:30.259017: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcublas.so.11\n",
      "2021-10-09 17:09:30.259032: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcufft.so.10\n",
      "2021-10-09 17:09:30.259045: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcurand.so.10\n",
      "2021-10-09 17:09:30.259057: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcusolver.so.10\n",
      "2021-10-09 17:09:30.259069: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcusparse.so.11\n",
      "2021-10-09 17:09:30.259081: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcudnn.so.8\n",
      "2021-10-09 17:09:30.259133: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.259977: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.260861: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.261708: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.262559: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.263394: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.264226: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.265058: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:30.265845: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1858] Adding visible gpu devices: 0, 1, 2, 3\n",
      "2021-10-09 17:09:30.265914: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcudart.so.11.0\n",
      "2021-10-09 17:09:31.528533: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1257] Device interconnect StreamExecutor with strength 1 edge matrix:\n",
      "2021-10-09 17:09:31.528566: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1263]      0 1 2 3 \n",
      "2021-10-09 17:09:31.528574: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1276] 0:   N Y N N \n",
      "2021-10-09 17:09:31.528579: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1276] 1:   Y N N N \n",
      "2021-10-09 17:09:31.528583: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1276] 2:   N N N Y \n",
      "2021-10-09 17:09:31.528588: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1276] 3:   N N Y N \n",
      "2021-10-09 17:09:31.528912: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:31.529834: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:31.530721: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:31.531574: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:31.532422: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:31.533620: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1402] Created TensorFlow device (/device:GPU:0 with 13996 MB memory) -> physical GPU (device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5)\n",
      "2021-10-09 17:09:31.534418: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:31.535396: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1402] Created TensorFlow device (/device:GPU:1 with 13996 MB memory) -> physical GPU (device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5)\n",
      "2021-10-09 17:09:31.535950: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:31.536873: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1402] Created TensorFlow device (/device:GPU:2 with 13996 MB memory) -> physical GPU (device: 2, name: Tesla T4, pci bus id: 0000:00:06.0, compute capability: 7.5)\n",
      "2021-10-09 17:09:31.537447: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:09:31.538415: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1402] Created TensorFlow device (/device:GPU:3 with 13996 MB memory) -> physical GPU (device: 3, name: Tesla T4, pci bus id: 0000:00:07.0, compute capability: 7.5)\n"
     ]
    }
   ],
   "source": [
    "tf.test.gpu_device_name()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8ff077f",
   "metadata": {
    "id": "twHKZbDln0Rw",
    "papermill": {
     "duration": 0.068961,
     "end_time": "2021-10-03T04:38:47.168570",
     "exception": false,
     "start_time": "2021-10-03T04:38:47.099609",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Setup Project Folder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "296ef562",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4JqBBSuGnJqj",
    "outputId": "ad841360-381f-40a3-b199-3b5b8bc9b767",
    "papermill": {
     "duration": 0.206237,
     "end_time": "2021-10-03T04:38:47.444498",
     "exception": false,
     "start_time": "2021-10-03T04:38:47.238261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/jupyter/projects/food\n"
     ]
    }
   ],
   "source": [
    "!pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f0966afd",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "nq0oWuqfp1Bt",
    "outputId": "e0442f7a-027d-4725-82ed-23526c99d184",
    "papermill": {
     "duration": 0.20826,
     "end_time": "2021-10-03T04:38:47.722618",
     "exception": false,
     "start_time": "2021-10-03T04:38:47.514358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 876\n",
      "-rw-r--r-- 1 jupyter jupyter  68476 Oct  1 23:03 2021_09_20_1_run_dl_model_101_classes.ipynb\n",
      "-rw-r--r-- 1 jupyter jupyter 162233 Oct  9 15:50 inference.ipynb\n",
      "-rw-r--r-- 1 jupyter jupyter 548548 Oct  9 15:37 only_mobilenet.ipynb\n",
      "drwxr-xr-x 5 jupyter jupyter   4096 Oct  9 15:35 project_food_dl/\n",
      "drwxr-xr-x 5 jupyter jupyter   4096 Oct  9 03:41 project_food_dl_temp/\n",
      "-rw-r--r-- 1 jupyter jupyter 105269 Oct  9 17:09 simple.ipynb\n"
     ]
    }
   ],
   "source": [
    "!ls -lF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "58df8390",
   "metadata": {
    "id": "aULYc0cdn4P4",
    "papermill": {
     "duration": 0.074735,
     "end_time": "2021-10-03T04:38:47.867190",
     "exception": false,
     "start_time": "2021-10-03T04:38:47.792455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "PROJECT_NAME = \"project_food_dl\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2ff672d7",
   "metadata": {
    "id": "7Z1kAeYv1XLt",
    "papermill": {
     "duration": 0.208421,
     "end_time": "2021-10-03T04:38:48.144839",
     "exception": false,
     "start_time": "2021-10-03T04:38:47.936418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# create a sub-directory for the data\n",
    "# run this once and comment out\n",
    "!mkdir -p {PROJECT_NAME}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2838cfbb",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "z03s6v80oOxy",
    "outputId": "21ab60da-1e61-40f1-8f3e-b50404cdf8e2",
    "papermill": {
     "duration": 0.209784,
     "end_time": "2021-10-03T04:38:48.422921",
     "exception": false,
     "start_time": "2021-10-03T04:38:48.213137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 876\n",
      "-rw-r--r-- 1 jupyter jupyter  68476 Oct  1 23:03 2021_09_20_1_run_dl_model_101_classes.ipynb\n",
      "-rw-r--r-- 1 jupyter jupyter 162233 Oct  9 15:50 inference.ipynb\n",
      "-rw-r--r-- 1 jupyter jupyter 548548 Oct  9 15:37 only_mobilenet.ipynb\n",
      "drwxr-xr-x 5 jupyter jupyter   4096 Oct  9 15:35 project_food_dl/\n",
      "drwxr-xr-x 5 jupyter jupyter   4096 Oct  9 03:41 project_food_dl_temp/\n",
      "-rw-r--r-- 1 jupyter jupyter 105269 Oct  9 17:09 simple.ipynb\n"
     ]
    }
   ],
   "source": [
    "!ls -lF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e66502be",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "UJuUSZjtWH75",
    "outputId": "088aa8be-cfc6-49b7-bbae-76ea847942b2",
    "papermill": {
     "duration": 0.21336,
     "end_time": "2021-10-03T04:38:48.706197",
     "exception": false,
     "start_time": "2021-10-03T04:38:48.492837",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 12\n",
      "drwxr-xr-x 3 jupyter jupyter 4096 Oct  9 15:37 artifacts/\n",
      "drwxr-xr-x 3 jupyter jupyter 4096 Oct  9 13:39 data/\n",
      "drwxr-xr-x 2 jupyter jupyter 4096 Oct  9 15:49 test_image/\n"
     ]
    }
   ],
   "source": [
    "!ls -lF {PROJECT_NAME}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8d946b9e",
   "metadata": {
    "id": "9LjF61RUWS6V",
    "papermill": {
     "duration": 0.264542,
     "end_time": "2021-10-03T04:38:49.041760",
     "exception": false,
     "start_time": "2021-10-03T04:38:48.777218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# remove log files from models\n",
    "!rm -rf {PROJECT_NAME}/artifacts\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b5709d92",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ZRLwRz78WkJK",
    "outputId": "bcf1d6ab-64b3-4d42-cf24-6339e1dad826",
    "papermill": {
     "duration": 0.075167,
     "end_time": "2021-10-03T04:38:49.187144",
     "exception": false,
     "start_time": "2021-10-03T04:38:49.111977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#!rm {PROJECT_NAME}/data/food-101.tar.gz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "279d5069",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "HX3Kz2FvYPDM",
    "outputId": "8a9deaad-dc00-442d-a2d1-8d5b2f16c888",
    "papermill": {
     "duration": 0.212653,
     "end_time": "2021-10-03T04:38:49.469146",
     "exception": false,
     "start_time": "2021-10-03T04:38:49.256493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rm: cannot remove 'artifacts.zip': No such file or directory\n"
     ]
    }
   ],
   "source": [
    "!rm artifacts.zip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6f9cf926",
   "metadata": {
    "id": "I6yPDTs4mxg3",
    "papermill": {
     "duration": 0.209346,
     "end_time": "2021-10-03T04:38:49.749090",
     "exception": false,
     "start_time": "2021-10-03T04:38:49.539744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# create a sub-directory for data\n",
    "!mkdir -p {PROJECT_NAME}/data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6492ab4b",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "6ucUB9MQoiF9",
    "outputId": "30eb1755-02f7-4793-e989-172723ad07c0",
    "papermill": {
     "duration": 0.210614,
     "end_time": "2021-10-03T04:38:50.030947",
     "exception": false,
     "start_time": "2021-10-03T04:38:49.820333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 8\n",
      "drwxr-xr-x 3 jupyter jupyter 4096 Oct  9 13:39 data/\n",
      "drwxr-xr-x 2 jupyter jupyter 4096 Oct  9 15:49 test_image/\n"
     ]
    }
   ],
   "source": [
    "!ls {PROJECT_NAME} -lF"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "243268d8",
   "metadata": {
    "id": "gYgWLloApHWI",
    "papermill": {
     "duration": 0.072065,
     "end_time": "2021-10-03T04:38:50.174552",
     "exception": false,
     "start_time": "2021-10-03T04:38:50.102487",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Artifacts is common ML term used to describe the output created by the training process.\n",
    "\n",
    "The output could be a fully trained model, a model checkpoint (for resuming training later), or simply a file created during the training process such as an image generated while training a Generative Adversarial Network (GAN).  \n",
    "In the case of a Deep Learning model, the model artifacts are the trained weights stored in a binary format.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "22f8efbf",
   "metadata": {
    "id": "KTWGkG26ok36",
    "papermill": {
     "duration": 0.21236,
     "end_time": "2021-10-03T04:38:50.458541",
     "exception": false,
     "start_time": "2021-10-03T04:38:50.246181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# create a sub-directory for artifacts\n",
    "!mkdir -p {PROJECT_NAME}/artifacts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5279d553",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7_x5OW_dowRr",
    "outputId": "d789f0d3-05f3-4def-8d65-e7734c4d83e8",
    "papermill": {
     "duration": 0.214694,
     "end_time": "2021-10-03T04:38:50.746577",
     "exception": false,
     "start_time": "2021-10-03T04:38:50.531883",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 12\n",
      "drwxr-xr-x 2 jupyter jupyter 4096 Oct  9 17:09 artifacts/\n",
      "drwxr-xr-x 3 jupyter jupyter 4096 Oct  9 13:39 data/\n",
      "drwxr-xr-x 2 jupyter jupyter 4096 Oct  9 15:49 test_image/\n"
     ]
    }
   ],
   "source": [
    "!ls {PROJECT_NAME} -lF"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74724341",
   "metadata": {
    "id": "Ou6WJYn28B_B",
    "papermill": {
     "duration": 0.07292,
     "end_time": "2021-10-03T04:38:50.891590",
     "exception": false,
     "start_time": "2021-10-03T04:38:50.818670",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Get Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b46dd9c9",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "pFzm8-JUiLiB",
    "outputId": "74ef78ee-4bac-41bc-e72e-990ba39f85a7",
    "papermill": {
     "duration": 0.078449,
     "end_time": "2021-10-03T04:38:51.042596",
     "exception": false,
     "start_time": "2021-10-03T04:38:50.964147",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# [internal]\n",
    "# Reshama can use in Collab (to save time)\n",
    "#!wget https://storage.googleapis.com/np-training-public/datasets/food/food-101.tar.gz -P {PROJECT_NAME}/data\n",
    "#!wget http://data.vision.ee.ethz.ch/cvl/food-101.tar.gz -P {PROJECT_NAME}/data\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d73ea20e",
   "metadata": {
    "id": "IV3o6sof09lW",
    "papermill": {
     "duration": 0.078602,
     "end_time": "2021-10-03T04:38:51.190624",
     "exception": false,
     "start_time": "2021-10-03T04:38:51.112022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# load the data\n",
    "# run this once each session and comment out\n",
    "# this takes about 8 minutes\n",
    "#!wget http://data.vision.ee.ethz.ch/cvl/food-101.tar.gz -P {PROJECT_NAME}/data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "db8e746d",
   "metadata": {
    "id": "stqqJc561hxH",
    "papermill": {
     "duration": 38.944424,
     "end_time": "2021-10-03T04:39:30.210586",
     "exception": false,
     "start_time": "2021-10-03T04:38:51.266162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# unpack the data\n",
    "# run only once, then comment out \n",
    "\n",
    "!tar xzf {PROJECT_NAME}/data/food-101.tar.gz -C {PROJECT_NAME}/data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "66678d02",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ltGPhCJutcK6",
    "outputId": "c526f81e-a463-4932-d2e5-66820a887ba0",
    "papermill": {
     "duration": 0.286873,
     "end_time": "2021-10-03T04:39:30.668047",
     "exception": false,
     "start_time": "2021-10-03T04:39:30.381174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 12\n",
      "drwxr-xr-x 2 jupyter jupyter 4096 Oct  9 17:09 artifacts/\n",
      "drwxr-xr-x 3 jupyter jupyter 4096 Oct  9 13:39 data/\n",
      "drwxr-xr-x 2 jupyter jupyter 4096 Oct  9 15:49 test_image/\n"
     ]
    }
   ],
   "source": [
    "!ls {PROJECT_NAME} -lF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e1f84bf6",
   "metadata": {
    "id": "dVzHTT4Y8YBx",
    "papermill": {
     "duration": 0.152409,
     "end_time": "2021-10-03T04:39:30.952170",
     "exception": false,
     "start_time": "2021-10-03T04:39:30.799761",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "DATA_DIR = str(PROJECT_NAME)+\"/data/food-101/images\"\n",
    "DATA_DIR = pathlib.Path(DATA_DIR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9aedff43",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "oqZKhFwR8bDW",
    "outputId": "388e666c-8282-44ac-b864-8347c247e72a",
    "papermill": {
     "duration": 0.165063,
     "end_time": "2021-10-03T04:39:31.253447",
     "exception": false,
     "start_time": "2021-10-03T04:39:31.088384",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PosixPath('project_food_dl/data/food-101/images')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DATA_DIR\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20a10143",
   "metadata": {
    "id": "ojoU1UKa3t77",
    "papermill": {
     "duration": 0.150082,
     "end_time": "2021-10-03T04:39:31.539904",
     "exception": false,
     "start_time": "2021-10-03T04:39:31.389822",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Look at dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "49c638db",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "U4vZy2ti30eX",
    "outputId": "fbbf1d6a-8aa9-4afa-b6eb-440ddb1b5f65",
    "papermill": {
     "duration": 0.280186,
     "end_time": "2021-10-03T04:39:31.968831",
     "exception": false,
     "start_time": "2021-10-03T04:39:31.688645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apple_pie\n",
      "baby_back_ribs\n",
      "baklava\n",
      "beef_carpaccio\n",
      "beef_tartare\n"
     ]
    }
   ],
   "source": [
    "# look at folder names\n",
    "!ls {DATA_DIR} | head -5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ec4241f1",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "kkZmKmUG30qB",
    "outputId": "c0457ebc-6f76-43f9-dcab-1ff5f6798966",
    "papermill": {
     "duration": 0.280293,
     "end_time": "2021-10-03T04:39:32.376079",
     "exception": false,
     "start_time": "2021-10-03T04:39:32.095786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1005649.jpg\n",
      "1011328.jpg\n",
      "101251.jpg\n",
      "1014775.jpg\n",
      "1026328.jpg\n",
      "ls: write error: Broken pipe\n"
     ]
    }
   ],
   "source": [
    "# look at first five images in first image folder\n",
    "!ls {DATA_DIR}/apple_pie | head -5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "761a9c60",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2h1HfkCn304h",
    "outputId": "bc799f55-eca0-42dd-c109-588739f725c6",
    "papermill": {
     "duration": 0.791226,
     "end_time": "2021-10-03T04:39:33.352345",
     "exception": false,
     "start_time": "2021-10-03T04:39:32.561119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "101000"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find out how many total images there are in database\n",
    "image_count = len(list(DATA_DIR.glob('*/*.jpg')))\n",
    "image_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b12aea4b",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "biXjyk-VvrGP",
    "outputId": "4d8e5539-f7a2-4310-a2b8-c369fe020140",
    "papermill": {
     "duration": 0.149467,
     "end_time": "2021-10-03T04:39:33.598695",
     "exception": false,
     "start_time": "2021-10-03T04:39:33.449228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "101\n"
     ]
    }
   ],
   "source": [
    "# find out how many different classes there are\n",
    "ALL_CLASS_NAMES = sorted(np.array([item.name for item in DATA_DIR.glob('*')]))\n",
    "print(len(ALL_CLASS_NAMES))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2693dfbc",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "cLaB5XjClydq",
    "outputId": "71109d21-0f08-41f4-8b33-806e5d21e8ad",
    "papermill": {
     "duration": 0.147423,
     "end_time": "2021-10-03T04:39:33.870115",
     "exception": false,
     "start_time": "2021-10-03T04:39:33.722692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['apple_pie',\n",
       " 'baby_back_ribs',\n",
       " 'baklava',\n",
       " 'beef_carpaccio',\n",
       " 'beef_tartare',\n",
       " 'beet_salad',\n",
       " 'beignets',\n",
       " 'bibimbap',\n",
       " 'bread_pudding',\n",
       " 'breakfast_burrito']"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ALL_CLASS_NAMES[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4595257a",
   "metadata": {
    "id": "67sN9AFCl-i9",
    "papermill": {
     "duration": 0.123148,
     "end_time": "2021-10-03T04:39:34.126147",
     "exception": false,
     "start_time": "2021-10-03T04:39:34.002999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b1ce241",
   "metadata": {
    "id": "EKJIdfOz9I6M",
    "papermill": {
     "duration": 0.14817,
     "end_time": "2021-10-03T04:39:34.427915",
     "exception": false,
     "start_time": "2021-10-03T04:39:34.279745",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Use Subset of Data\n",
    "(to speed up training)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8541d003",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "gk0v6yfTmYjb",
    "outputId": "ea17f1be-9166-4565-80f6-9d0bafa4cb08",
    "papermill": {
     "duration": 0.159341,
     "end_time": "2021-10-03T04:39:34.749030",
     "exception": false,
     "start_time": "2021-10-03T04:39:34.589689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "101"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use full dataset (all classes)\n",
    "subset = len(ALL_CLASS_NAMES)\n",
    "subset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "bf99f1a4",
   "metadata": {
    "id": "7-YtYAWsmdxc",
    "papermill": {
     "duration": 0.157913,
     "end_time": "2021-10-03T04:39:35.053091",
     "exception": false,
     "start_time": "2021-10-03T04:39:34.895178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# use subset of classes\n",
    "# NOTE: if subset=102, we are using the full dataset\n",
    "start=0\n",
    "subset = 102\n",
    "subset = 102"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "aa5e5b8f",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "QHoQMuvVR5UF",
    "outputId": "d197c4ef-9b92-42b5-8af3-9fe590f35cb1",
    "papermill": {
     "duration": 0.154327,
     "end_time": "2021-10-03T04:39:35.345016",
     "exception": false,
     "start_time": "2021-10-03T04:39:35.190689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "101\n",
      "first few classes: \n",
      "['apple_pie',\n",
      " 'baby_back_ribs',\n",
      " 'baklava',\n",
      " 'beef_carpaccio',\n",
      " 'beef_tartare',\n",
      " 'beet_salad',\n",
      " 'beignets']\n"
     ]
    }
   ],
   "source": [
    "USE_CLASS_NAMES = ALL_CLASS_NAMES[start:start+subset]\n",
    "print(len(USE_CLASS_NAMES))\n",
    "print(\"first few classes: \")\n",
    "pprint(USE_CLASS_NAMES[:7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "9b993905",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 35
    },
    "id": "sg_j92G_Ah7P",
    "outputId": "f570ffbc-4e4d-4ba5-893c-8cc2f7a7ac03",
    "papermill": {
     "duration": 0.153287,
     "end_time": "2021-10-03T04:39:35.652049",
     "exception": false,
     "start_time": "2021-10-03T04:39:35.498762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'apple_pie'"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# let's examine one class\n",
    "class1 = USE_CLASS_NAMES[0]\n",
    "class1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8b788c3",
   "metadata": {
    "id": "lzZ9ETvD0wac",
    "papermill": {
     "duration": 0.145536,
     "end_time": "2021-10-03T04:39:35.933136",
     "exception": false,
     "start_time": "2021-10-03T04:39:35.787600",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Save classes as classes.json\n",
    "\n",
    "We want to save classes as a `*.json` file, so it will look like:\n",
    "```json\n",
    "[\"ceviche\", \"cheese_plate\", \"cheesecake\", \"chicken_curry\", \"chicken_quesadilla\", \"chicken_wings\", \"chocolate_cake\", \"chocolate_mousse\", \"churros\", \"clam_chowder\"]\n",
    "```\n",
    "\n",
    "#### example of `txt` file\n",
    "```text\n",
    "ceviche\n",
    "cheese_plate\n",
    "cheesecake\n",
    "...\n",
    "```\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "637b2d0e",
   "metadata": {
    "id": "fENjf2_-0vHh",
    "papermill": {
     "duration": 0.15061,
     "end_time": "2021-10-03T04:39:36.240802",
     "exception": false,
     "start_time": "2021-10-03T04:39:36.090192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# with open(f\"{PROJECT_NAME}/artifacts/classes.txt\",'w') as f:\n",
    "#   f.write('\\n'.join(USE_CLASS_NAMES))\n",
    "\n",
    "# with open(f\"{PROJECT_NAME}/artifacts/classes.json\",'w') as f:\n",
    "#   json.dump(USE_CLASS_NAMES, f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d39aecec",
   "metadata": {
    "id": "wTuGfjWS31KD",
    "papermill": {
     "duration": 0.146386,
     "end_time": "2021-10-03T04:39:36.528074",
     "exception": false,
     "start_time": "2021-10-03T04:39:36.381688",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "b969b1f6",
   "metadata": {
    "id": "9h0eB56h1nYg",
    "papermill": {
     "duration": 0.149016,
     "end_time": "2021-10-03T04:39:36.823349",
     "exception": false,
     "start_time": "2021-10-03T04:39:36.674333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# with open(f\"{PROJECT_NAME}/artifacts/classes.json\",'r') as f:\n",
    "#   json.dump(USE_CLASS_NAMES, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3277a312",
   "metadata": {
    "id": "WDM69K691nk2",
    "papermill": {
     "duration": 0.157065,
     "end_time": "2021-10-03T04:39:37.135661",
     "exception": false,
     "start_time": "2021-10-03T04:39:36.978596",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e858203d",
   "metadata": {
    "id": "bj3IuU361n7N",
    "papermill": {
     "duration": 0.169945,
     "end_time": "2021-10-03T04:39:37.462373",
     "exception": false,
     "start_time": "2021-10-03T04:39:37.292428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "48b8204f",
   "metadata": {
    "id": "cqKpCtdOzx-1",
    "papermill": {
     "duration": 0.162736,
     "end_time": "2021-10-03T04:39:37.776227",
     "exception": false,
     "start_time": "2021-10-03T04:39:37.613491",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Look at Images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "7c4b2aea",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 563
    },
    "id": "DttFFRdw91st",
    "outputId": "75d82b1f-d966-44ea-a275-3b99a2563310",
    "papermill": {
     "duration": 0.226479,
     "end_time": "2021-10-03T04:39:38.160142",
     "exception": false,
     "start_time": "2021-10-03T04:39:37.933663",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Image Size (w, h):  512 , 384\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=256x192 at 0x7EFCF306D210>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Image Size (w, h):  512 , 512\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=256x256 at 0x7EFB90100C50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "images = list(DATA_DIR.glob(f'{class1}/*'))\n",
    "\n",
    "for image_path in images[:2]:\n",
    "    # resize image\n",
    "    im = Image.open(str(image_path))\n",
    "    w, h = im.size\n",
    "    print('Image Size (w, h): ', w, \",\",  h)\n",
    "    percent_resize = 0.5\n",
    "    im = im.resize((int(w*percent_resize), int(h*percent_resize)))\n",
    "    display.display(im)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55771496",
   "metadata": {
    "id": "VNlINYE6p0Qy",
    "papermill": {
     "duration": 0.154326,
     "end_time": "2021-10-03T04:39:38.538322",
     "exception": false,
     "start_time": "2021-10-03T04:39:38.383996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3f0ee9c0",
   "metadata": {
    "id": "q-Jx2g1O4KeW",
    "papermill": {
     "duration": 0.147522,
     "end_time": "2021-10-03T04:39:38.816326",
     "exception": false,
     "start_time": "2021-10-03T04:39:38.668804",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Setup for Training Model\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88e101b4",
   "metadata": {
    "id": "iVlaKld4l_uk",
    "papermill": {
     "duration": 0.169442,
     "end_time": "2021-10-03T04:39:39.143259",
     "exception": false,
     "start_time": "2021-10-03T04:39:38.973817",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "The ImageDataGenerator is used to create training and validation splits. It also has several builtin image preprocessing transformations.\n",
    "\n",
    "https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "cec9d85d",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "EKdhtarel1P5",
    "outputId": "1e5f7610-8c82-4019-e204-cf9eb79cbd80",
    "papermill": {
     "duration": 0.15492,
     "end_time": "2021-10-03T04:39:39.454298",
     "exception": false,
     "start_time": "2021-10-03T04:39:39.299378",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of classes we are training:  101\n",
      "\n",
      "List of classes\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['apple_pie',\n",
       " 'baby_back_ribs',\n",
       " 'baklava',\n",
       " 'beef_carpaccio',\n",
       " 'beef_tartare',\n",
       " 'beet_salad',\n",
       " 'beignets',\n",
       " 'bibimbap',\n",
       " 'bread_pudding',\n",
       " 'breakfast_burrito']"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "BATCH_SIZE = 32 * len(gpus)\n",
    "IMG_HEIGHT = 224\n",
    "IMG_WIDTH = 224\n",
    "STEPS_PER_EPOCH = np.ceil(image_count/BATCH_SIZE)\n",
    "\n",
    "print(\"Number of classes we are training: \" ,len(USE_CLASS_NAMES))\n",
    "print(\"\\nList of classes\")  \n",
    "list(USE_CLASS_NAMES)[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "b4480e6a",
   "metadata": {
    "id": "Mys3-V4-lwDq",
    "papermill": {
     "duration": 0.159432,
     "end_time": "2021-10-03T04:39:40.044526",
     "exception": false,
     "start_time": "2021-10-03T04:39:39.885094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_image_data_generator(preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input ):\n",
    "\n",
    "    # use image augmentation\n",
    "    image_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n",
    "        #rescale = 1./255., \n",
    "        validation_split=0.2, \n",
    "        rotation_range = 40, width_shift_range = 0.2, \n",
    "        height_shift_range = 0.2, shear_range = 0.2, \n",
    "        zoom_range = 0.2, horizontal_flip = True ,\n",
    "        preprocessing_function=preprocessing_function\n",
    "    )\n",
    "    \n",
    "      # create a data generator object with options (location of images, batch size, option to shuffle, etc)\n",
    "    image_data_gen_train = image_generator.flow_from_directory(\n",
    "          directory=str(DATA_DIR),\n",
    "          batch_size=BATCH_SIZE,\n",
    "          shuffle=True,\n",
    "          target_size=(IMG_HEIGHT, IMG_WIDTH),\n",
    "          classes = list(USE_CLASS_NAMES) ,\n",
    "          subset = 'training'\n",
    "    )\n",
    "    image_data_gen_validation = image_generator.flow_from_directory(\n",
    "          directory=str(DATA_DIR),\n",
    "          batch_size=BATCH_SIZE,\n",
    "          shuffle=False,\n",
    "          target_size=(IMG_HEIGHT, IMG_WIDTH),\n",
    "          classes = list(USE_CLASS_NAMES) ,\n",
    "          subset = 'validation'\n",
    "    )\n",
    "    \n",
    "    \n",
    "    return image_data_gen_train,image_data_gen_validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ccfa0cc0",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "K5kyoQCRMDbc",
    "outputId": "d1ab8ab5-ac55-47fa-e600-ae31b8c9ef8f",
    "papermill": {
     "duration": 8.347423,
     "end_time": "2021-10-03T04:39:48.527960",
     "exception": false,
     "start_time": "2021-10-03T04:39:40.180537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 80814 images belonging to 101 classes.\n",
      "Found 20202 images belonging to 101 classes.\n"
     ]
    }
   ],
   "source": [
    "image_data_gen_train , image_data_gen_validation = get_image_data_generator (preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d295f641",
   "metadata": {
    "id": "H-VZbiM9MDuh",
    "papermill": {
     "duration": 0.152822,
     "end_time": "2021-10-03T04:39:48.792702",
     "exception": false,
     "start_time": "2021-10-03T04:39:48.639880",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Save list of classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d6c32fbb",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DgpsH0i6rDW-",
    "outputId": "f4633e49-f85b-478d-c02c-fefd4e3c44c1",
    "papermill": {
     "duration": 0.150123,
     "end_time": "2021-10-03T04:39:49.089063",
     "exception": false,
     "start_time": "2021-10-03T04:39:48.938940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "101"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_data_gen_train.num_classes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "5e6f3dca",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "eFmz5pkNKpz1",
    "outputId": "86856feb-a54b-4f52-c5f2-ace65b2cb17c",
    "papermill": {
     "duration": 0.156665,
     "end_time": "2021-10-03T04:39:49.384223",
     "exception": false,
     "start_time": "2021-10-03T04:39:49.227558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['apple_pie', 'baby_back_ribs', 'baklava', 'beef_carpaccio', 'beef_tartare', 'beet_salad', 'beignets', 'bibimbap', 'bread_pudding', 'breakfast_burrito', 'bruschetta', 'caesar_salad', 'cannoli', 'caprese_salad', 'carrot_cake', 'ceviche', 'cheese_plate', 'cheesecake', 'chicken_curry', 'chicken_quesadilla', 'chicken_wings', 'chocolate_cake', 'chocolate_mousse', 'churros', 'clam_chowder', 'club_sandwich', 'crab_cakes', 'creme_brulee', 'croque_madame', 'cup_cakes', 'deviled_eggs', 'donuts', 'dumplings', 'edamame', 'eggs_benedict', 'escargots', 'falafel', 'filet_mignon', 'fish_and_chips', 'foie_gras', 'french_fries', 'french_onion_soup', 'french_toast', 'fried_calamari', 'fried_rice', 'frozen_yogurt', 'garlic_bread', 'gnocchi', 'greek_salad', 'grilled_cheese_sandwich', 'grilled_salmon', 'guacamole', 'gyoza', 'hamburger', 'hot_and_sour_soup', 'hot_dog', 'huevos_rancheros', 'hummus', 'ice_cream', 'lasagna', 'lobster_bisque', 'lobster_roll_sandwich', 'macaroni_and_cheese', 'macarons', 'miso_soup', 'mussels', 'nachos', 'omelette', 'onion_rings', 'oysters', 'pad_thai', 'paella', 'pancakes', 'panna_cotta', 'peking_duck', 'pho', 'pizza', 'pork_chop', 'poutine', 'prime_rib', 'pulled_pork_sandwich', 'ramen', 'ravioli', 'red_velvet_cake', 'risotto', 'samosa', 'sashimi', 'scallops', 'seaweed_salad', 'shrimp_and_grits', 'spaghetti_bolognese', 'spaghetti_carbonara', 'spring_rolls', 'steak', 'strawberry_shortcake', 'sushi', 'tacos', 'takoyaki', 'tiramisu', 'tuna_tartare', 'waffles'])"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_data_gen_train.class_indices.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "5b50df0c",
   "metadata": {
    "id": "PqHkvoFzLFA7",
    "papermill": {
     "duration": 0.157419,
     "end_time": "2021-10-03T04:39:49.678137",
     "exception": false,
     "start_time": "2021-10-03T04:39:49.520718",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "list_of_classes = list(image_data_gen_train.class_indices.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "caaabd07",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "IfwjwtgdLJey",
    "outputId": "67ab357b-5702-4de6-b566-772ef58dbc72",
    "papermill": {
     "duration": 0.15668,
     "end_time": "2021-10-03T04:39:49.975803",
     "exception": false,
     "start_time": "2021-10-03T04:39:49.819123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['apple_pie',\n",
       " 'baby_back_ribs',\n",
       " 'baklava',\n",
       " 'beef_carpaccio',\n",
       " 'beef_tartare',\n",
       " 'beet_salad',\n",
       " 'beignets',\n",
       " 'bibimbap',\n",
       " 'bread_pudding',\n",
       " 'breakfast_burrito',\n",
       " 'bruschetta',\n",
       " 'caesar_salad',\n",
       " 'cannoli',\n",
       " 'caprese_salad',\n",
       " 'carrot_cake']"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_of_classes[:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "0305d047",
   "metadata": {
    "id": "6wpPOH3NLcgQ",
    "papermill": {
     "duration": 0.16201,
     "end_time": "2021-10-03T04:39:50.293075",
     "exception": false,
     "start_time": "2021-10-03T04:39:50.131065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "with open(f\"{PROJECT_NAME}/artifacts/classes.json\",'w') as f:\n",
    "    json.dump(list_of_classes, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "4299a770",
   "metadata": {
    "id": "FDR4OrxUrIba",
    "papermill": {
     "duration": 0.154734,
     "end_time": "2021-10-03T04:39:50.590187",
     "exception": false,
     "start_time": "2021-10-03T04:39:50.435453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def load_image(path:str) :\n",
    "    img = Image.open(path)\n",
    "    img = np.array(img)/255.0\n",
    "    return img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "d2282ed0",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "sPVY9jcxrLjy",
    "outputId": "922b8489-9664-4fa3-bf51-2071f528a0c9",
    "papermill": {
     "duration": 0.295452,
     "end_time": "2021-10-03T04:39:51.035548",
     "exception": false,
     "start_time": "2021-10-03T04:39:50.740096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 49M\n",
      "-rw-r--r-- 1 jupyter jupyter  42K Sep 21  2013 1005649.jpg\n",
      "-rw-r--r-- 1 jupyter jupyter  40K Sep 21  2013 1011328.jpg\n",
      "-rw-r--r-- 1 jupyter jupyter  34K Sep 21  2013 101251.jpg\n",
      "-rw-r--r-- 1 jupyter jupyter  47K Sep 21  2013 1014775.jpg\n",
      "-rw-r--r-- 1 jupyter jupyter  58K Sep 21  2013 1026328.jpg\n",
      "ls: write error: Broken pipe\n"
     ]
    }
   ],
   "source": [
    "!ls -lh {DATA_DIR}/{class1}/ | head -6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "7a648b66",
   "metadata": {
    "id": "TO9kwG3KrOgj",
    "papermill": {
     "duration": 0.167817,
     "end_time": "2021-10-03T04:39:51.362995",
     "exception": false,
     "start_time": "2021-10-03T04:39:51.195178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#load_image(f\"{data_dir}/{class1}/1005649.jpg\").shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "04839f99",
   "metadata": {
    "id": "pt3Ce1dgrTfH",
    "papermill": {
     "duration": 0.15717,
     "end_time": "2021-10-03T04:39:51.667067",
     "exception": false,
     "start_time": "2021-10-03T04:39:51.509897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#plt.imshow(load_image(f\"{data_dir}/{class1}/1005649.jpg\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "b7ab4eb2",
   "metadata": {
    "id": "VaUPgCy5XhgG",
    "papermill": {
     "duration": 0.156332,
     "end_time": "2021-10-03T04:39:51.973918",
     "exception": false,
     "start_time": "2021-10-03T04:39:51.817586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#?plt.imshow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "37f38cfd",
   "metadata": {
    "id": "IugzXnuoallE",
    "papermill": {
     "duration": 0.168687,
     "end_time": "2021-10-03T04:39:52.274505",
     "exception": false,
     "start_time": "2021-10-03T04:39:52.105818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#?tf.keras.utils.normalize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "33578c6c",
   "metadata": {
    "id": "BxKk2LiurWLH",
    "papermill": {
     "duration": 0.150307,
     "end_time": "2021-10-03T04:39:52.561129",
     "exception": false,
     "start_time": "2021-10-03T04:39:52.410822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# does some pre-processing (built into image generator)\n",
    "def show_batch(image_batch, label_batch):\n",
    "    plt.figure(figsize=(10,10))\n",
    "    for n in range(25):\n",
    "        ax = plt.subplot(5,5,n+1)\n",
    "        print(im.size)\n",
    "\n",
    "        plt.imshow(image_batch[n]) # norm=(-1,1)\n",
    "        plt.title(USE_CLASS_NAMES[label_batch[n]==1][0].title())\n",
    "        plt.axis('off')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "765a0856",
   "metadata": {
    "id": "2ztApbLNrfco",
    "papermill": {
     "duration": 0.589644,
     "end_time": "2021-10-03T04:39:53.296455",
     "exception": false,
     "start_time": "2021-10-03T04:39:52.706811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# ! this code not working  (ask Nidhin)\n",
    "\n",
    "image_batch, label_batch = next(image_data_gen_train)\n",
    "#show_batch(image_batch, label_batch)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9dc71206",
   "metadata": {
    "id": "hJmGNuk5I4WW",
    "papermill": {
     "duration": 0.156439,
     "end_time": "2021-10-03T04:39:53.598637",
     "exception": false,
     "start_time": "2021-10-03T04:39:53.442198",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Architectures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33e17fb2-6ea5-4bd5-8b73-3657c1a358d6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "20f7535f-3523-4a3f-b396-c221a50f5218",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Using MirroredStrategy with devices ('/job:localhost/replica:0/task:0/device:GPU:0', '/job:localhost/replica:0/task:0/device:GPU:1', '/job:localhost/replica:0/task:0/device:GPU:2', '/job:localhost/replica:0/task:0/device:GPU:3')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-10-09 17:10:35.333949: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.334888: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 0 with properties: \n",
      "pciBusID: 0000:00:04.0 name: Tesla T4 computeCapability: 7.5\n",
      "coreClock: 1.59GHz coreCount: 40 deviceMemorySize: 14.75GiB deviceMemoryBandwidth: 298.08GiB/s\n",
      "2021-10-09 17:10:35.335016: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.335827: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 1 with properties: \n",
      "pciBusID: 0000:00:05.0 name: Tesla T4 computeCapability: 7.5\n",
      "coreClock: 1.59GHz coreCount: 40 deviceMemorySize: 14.75GiB deviceMemoryBandwidth: 298.08GiB/s\n",
      "2021-10-09 17:10:35.335888: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.336691: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 2 with properties: \n",
      "pciBusID: 0000:00:06.0 name: Tesla T4 computeCapability: 7.5\n",
      "coreClock: 1.59GHz coreCount: 40 deviceMemorySize: 14.75GiB deviceMemoryBandwidth: 298.08GiB/s\n",
      "2021-10-09 17:10:35.336743: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.337603: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1716] Found device 3 with properties: \n",
      "pciBusID: 0000:00:07.0 name: Tesla T4 computeCapability: 7.5\n",
      "coreClock: 1.59GHz coreCount: 40 deviceMemorySize: 14.75GiB deviceMemoryBandwidth: 298.08GiB/s\n",
      "2021-10-09 17:10:35.337677: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcudart.so.11.0\n",
      "2021-10-09 17:10:35.337706: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcublas.so.11\n",
      "2021-10-09 17:10:35.337728: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcufft.so.10\n",
      "2021-10-09 17:10:35.337742: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcurand.so.10\n",
      "2021-10-09 17:10:35.337756: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcusolver.so.10\n",
      "2021-10-09 17:10:35.337770: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcusparse.so.11\n",
      "2021-10-09 17:10:35.337783: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcudnn.so.8\n",
      "2021-10-09 17:10:35.337855: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.338728: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.339573: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.340407: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.341266: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.342206: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.343119: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.344193: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.345007: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1858] Adding visible gpu devices: 0, 1, 2, 3\n",
      "2021-10-09 17:10:35.345090: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1257] Device interconnect StreamExecutor with strength 1 edge matrix:\n",
      "2021-10-09 17:10:35.345098: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1263]      0 1 2 3 \n",
      "2021-10-09 17:10:35.345104: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1276] 0:   N Y N N \n",
      "2021-10-09 17:10:35.345109: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1276] 1:   Y N N N \n",
      "2021-10-09 17:10:35.345113: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1276] 2:   N N N Y \n",
      "2021-10-09 17:10:35.345117: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1276] 3:   N N Y N \n",
      "2021-10-09 17:10:35.345303: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.346149: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.347003: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.347937: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.348828: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.349641: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1402] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 13996 MB memory) -> physical GPU (device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5)\n",
      "2021-10-09 17:10:35.349707: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.350521: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1402] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:1 with 13996 MB memory) -> physical GPU (device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5)\n",
      "2021-10-09 17:10:35.350583: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.351381: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1402] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:2 with 13996 MB memory) -> physical GPU (device: 2, name: Tesla T4, pci bus id: 0000:00:06.0, compute capability: 7.5)\n",
      "2021-10-09 17:10:35.351436: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:982] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2021-10-09 17:10:35.352224: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1402] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:3 with 13996 MB memory) -> physical GPU (device: 3, name: Tesla T4, pci bus id: 0000:00:07.0, compute capability: 7.5)\n"
     ]
    }
   ],
   "source": [
    "# Open a strategy scope and create/restore the model.\n",
    "strategy = tf.distribute.MirroredStrategy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d88a3af-c17b-4b62-ac6a-c37769b7c826",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce2e3519-8fc4-4ae9-b60a-f8f8e6b53b32",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ad846810",
   "metadata": {
    "id": "IVUfnmBD-s4L",
    "papermill": {
     "duration": 0.153471,
     "end_time": "2021-10-03T04:39:55.106426",
     "exception": false,
     "start_time": "2021-10-03T04:39:54.952955",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Model 1: VGG19"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "acc5598a",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "FjOcZxBA-xQH",
    "outputId": "8f730e3a-ad73-4885-bf8c-c120e881d1b6",
    "papermill": {
     "duration": 0.893424,
     "end_time": "2021-10-03T04:39:56.160230",
     "exception": false,
     "start_time": "2021-10-03T04:39:55.266806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "IMAGE_SHAPE = (IMG_HEIGHT, IMG_WIDTH)\n",
    "\n",
    "\n",
    "def get_model_vgg():\n",
    "    # Use VGG19 pretrained on ImageNet\n",
    "    base_layers = tf.keras.applications.VGG19(weights='imagenet',include_top=False,input_shape=IMAGE_SHAPE+(3,) )\n",
    "\n",
    "    # Add new layers to be finetuned\n",
    "    # The last layer, is the classification layer and should match the number of classes in the dataset. The activation should be softmax \n",
    "    clf = tf.keras.Sequential([\n",
    "        base_layers\n",
    "        , tf.keras.layers.GlobalAveragePooling2D()\n",
    "        , tf.keras.layers.Dense(1024, activation='relu')\n",
    "        , tf.keras.layers.Dropout(0.5)\n",
    "        , tf.keras.layers.Dense(image_data_gen_train.num_classes, name='classification', activation='softmax')\n",
    "    ])\n",
    "    \n",
    "    return clf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "b87f4a60",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "XDSTa83H-xMY",
    "outputId": "c89e2be3-4603-4056-d8f8-649d7c56ae76",
    "papermill": {
     "duration": 0.160854,
     "end_time": "2021-10-03T04:39:56.409280",
     "exception": false,
     "start_time": "2021-10-03T04:39:56.248426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "vgg19 (Functional)           (None, 7, 7, 512)         20024384  \n",
      "_________________________________________________________________\n",
      "global_average_pooling2d (Gl (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 1024)              525312    \n",
      "_________________________________________________________________\n",
      "dropout (Dropout)            (None, 1024)              0         \n",
      "_________________________________________________________________\n",
      "classification (Dense)       (None, 101)               103525    \n",
      "=================================================================\n",
      "Total params: 20,653,221\n",
      "Trainable params: 20,653,221\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "with strategy.scope():\n",
    "    clf = get_model_vgg()\n",
    "    \n",
    "\n",
    "clf.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "911cc2d0",
   "metadata": {
    "id": "LTb5gj78-xI-",
    "papermill": {
     "duration": 0.157113,
     "end_time": "2021-10-03T04:39:56.709675",
     "exception": false,
     "start_time": "2021-10-03T04:39:56.552562",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# freezes the base layers\n",
    "clf.layers[0].trainable = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "a0a103e6",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "xdc-1YtD-9H6",
    "outputId": "5388bd0c-1c08-490f-86a9-71131e83d095",
    "papermill": {
     "duration": 0.163085,
     "end_time": "2021-10-03T04:39:57.022510",
     "exception": false,
     "start_time": "2021-10-03T04:39:56.859425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "vgg19 (Functional)           (None, 7, 7, 512)         20024384  \n",
      "_________________________________________________________________\n",
      "global_average_pooling2d (Gl (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 1024)              525312    \n",
      "_________________________________________________________________\n",
      "dropout (Dropout)            (None, 1024)              0         \n",
      "_________________________________________________________________\n",
      "classification (Dense)       (None, 101)               103525    \n",
      "=================================================================\n",
      "Total params: 20,653,221\n",
      "Trainable params: 628,837\n",
      "Non-trainable params: 20,024,384\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# notice that after freezing the base layers, the non trainable params are equal to the number of parameters in the base layer \n",
    "clf.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "d7f0bad6",
   "metadata": {
    "id": "c15yvBKp_HSb",
    "papermill": {
     "duration": 0.164459,
     "end_time": "2021-10-03T04:39:57.329993",
     "exception": false,
     "start_time": "2021-10-03T04:39:57.165534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "callbacks = [\n",
    "    tf.keras.callbacks.CSVLogger(str(str(PROJECT_NAME)+\"/artifacts/training_VGG19.log\"))\n",
    "     ,tf.keras.callbacks.ReduceLROnPlateau(monitor = 'val_loss',patience = 3,verbose = 1)\n",
    "    ,tf.keras.callbacks.EarlyStopping(monitor = 'val_loss',patience = 3,verbose = 1)\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "a91a2cd0",
   "metadata": {
    "id": "1Jf0G26w-_zT",
    "papermill": {
     "duration": 0.165749,
     "end_time": "2021-10-03T04:39:57.645843",
     "exception": false,
     "start_time": "2021-10-03T04:39:57.480094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Set the model to use Adam optimizer , cross entropy loss, and track accuracy.\n",
    "# Since the dataset has multiple classes, we are using cross entropy loss.\n",
    "clf.compile(\n",
    "  optimizer=tf.keras.optimizers.Adam(),\n",
    "  loss='categorical_crossentropy' ,\n",
    "  metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "167315f0",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "6BFq-Qc6-_ve",
    "outputId": "c93aa765-f72e-4d12-919a-e43f7ea5ac3e",
    "papermill": {
     "duration": 2618.995148,
     "end_time": "2021-10-03T05:23:36.785005",
     "exception": false,
     "start_time": "2021-10-03T04:39:57.789857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 80814 images belonging to 101 classes.\n",
      "Found 20202 images belonging to 101 classes.\n",
      "Epoch 1/5\n",
      "WARNING:tensorflow:From /opt/conda/lib/python3.7/site-packages/tensorflow/python/data/ops/multi_device_iterator_ops.py:601: get_next_as_optional (from tensorflow.python.data.ops.iterator_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use `tf.data.Iterator.get_next_as_optional()` instead.\n",
      "INFO:tensorflow:batch_all_reduce: 4 all-reduces with algorithm = nccl, num_packs = 1\n",
      "INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n",
      "INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n",
      "INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n",
      "INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n",
      "INFO:tensorflow:batch_all_reduce: 4 all-reduces with algorithm = nccl, num_packs = 1\n",
      "INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n",
      "INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n",
      "INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n",
      "INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2021-10-09 17:14:00.937589: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcublas.so.11\n",
      "2021-10-09 17:14:03.828971: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcudnn.so.8\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "632/632 [==============================] - ETA: 0s - loss: 3.1921 - accuracy: 0.2740INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n",
      "INFO:tensorflow:Reduce to /job:localhost/replica:0/task:0/device:CPU:0 then broadcast to ('/job:localhost/replica:0/task:0/device:CPU:0',).\n",
      "632/632 [==============================] - 273s 431ms/step - loss: 3.1921 - accuracy: 0.2740 - val_loss: 2.2864 - val_accuracy: 0.4378\n",
      "Epoch 2/5\n",
      "632/632 [==============================] - 266s 421ms/step - loss: 2.5395 - accuracy: 0.3783 - val_loss: 2.1212 - val_accuracy: 0.4680\n",
      "Epoch 3/5\n",
      "632/632 [==============================] - 268s 424ms/step - loss: 2.4278 - accuracy: 0.4021 - val_loss: 2.0607 - val_accuracy: 0.4830\n",
      "Epoch 4/5\n",
      "632/632 [==============================] - 269s 425ms/step - loss: 2.3663 - accuracy: 0.4134 - val_loss: 2.0511 - val_accuracy: 0.4878\n",
      "Epoch 5/5\n",
      "632/632 [==============================] - 271s 429ms/step - loss: 2.3286 - accuracy: 0.4231 - val_loss: 2.0101 - val_accuracy: 0.5008\n"
     ]
    }
   ],
   "source": [
    "# train the model for 5 epochs\n",
    "#%%time\n",
    "image_data_gen_train , image_data_gen_validation = get_image_data_generator (preprocessing_function=tf.keras.applications.vgg19.preprocess_input)\n",
    "history = clf.fit(image_data_gen_train\n",
    "                        ,epochs=5\n",
    "                        ,workers=8 \n",
    "                        ,callbacks=callbacks\n",
    "                        ,validation_data=image_data_gen_validation\n",
    "                        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "413fa165",
   "metadata": {
    "id": "hN-z3Z07-9EP",
    "papermill": {
     "duration": 2.636622,
     "end_time": "2021-10-03T05:23:41.875650",
     "exception": false,
     "start_time": "2021-10-03T05:23:39.239028",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "export_path = str(PROJECT_NAME)+\"/artifacts/model_VGG19.h5\"\n",
    "export_path\n",
    "clf.save(export_path, save_format='h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a69de9f0",
   "metadata": {
    "id": "LdlVOcYW-w7Q",
    "papermill": {
     "duration": 2.527456,
     "end_time": "2021-10-03T05:23:46.914014",
     "exception": false,
     "start_time": "2021-10-03T05:23:44.386558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "dcfbc00d",
   "metadata": {
    "id": "8dE6YQT0mPgk",
    "papermill": {
     "duration": 2.476223,
     "end_time": "2021-10-03T05:23:51.898049",
     "exception": false,
     "start_time": "2021-10-03T05:23:49.421826",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Model 2:  ResNet50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "1a76d302",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3hbGfCjfoM0h",
    "outputId": "92353983-996e-4fba-85c6-5f488c2aad46",
    "papermill": {
     "duration": 4.918862,
     "end_time": "2021-10-03T05:23:59.319179",
     "exception": false,
     "start_time": "2021-10-03T05:23:54.400317",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "IMAGE_SHAPE = (IMG_HEIGHT, IMG_WIDTH)\n",
    "\n",
    "\n",
    "def get_resnet_50():\n",
    "    base_layers = tf.keras.applications.ResNet50(weights='imagenet', include_top=False,input_shape=IMAGE_SHAPE+(3,) )\n",
    "\n",
    "    model = tf.keras.Sequential([\n",
    "        base_layers    \n",
    "        , tf.keras.layers.GlobalAveragePooling2D()\n",
    "        , tf.keras.layers.Dense(1024, activation='relu')\n",
    "        , tf.keras.layers.Dropout(0.5)\n",
    "        , tf.keras.layers.Dense(image_data_gen_train.num_classes, name='classification', activation='softmax')\n",
    "\n",
    "\n",
    "    ])\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "f1963f76",
   "metadata": {
    "id": "9i4-ngeVKIOD",
    "papermill": {
     "duration": 2.452473,
     "end_time": "2021-10-03T05:24:04.260144",
     "exception": false,
     "start_time": "2021-10-03T05:24:01.807671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "with strategy.scope():\n",
    "    clf = get_resnet_50()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "1333ecd4",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "FYYyROWkoNAF",
    "outputId": "85cc3dab-af4e-439e-d657-86a95dbf54ab",
    "papermill": {
     "duration": 2.486413,
     "end_time": "2021-10-03T05:24:09.277711",
     "exception": false,
     "start_time": "2021-10-03T05:24:06.791298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "resnet50 (Functional)        (None, 7, 7, 2048)        23587712  \n",
      "_________________________________________________________________\n",
      "global_average_pooling2d_1 ( (None, 2048)              0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 1024)              2098176   \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 1024)              0         \n",
      "_________________________________________________________________\n",
      "classification (Dense)       (None, 101)               103525    \n",
      "=================================================================\n",
      "Total params: 25,789,413\n",
      "Trainable params: 25,736,293\n",
      "Non-trainable params: 53,120\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "clf.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "e2bbe87f",
   "metadata": {
    "id": "VXHqJo_roNN0",
    "papermill": {
     "duration": 2.548684,
     "end_time": "2021-10-03T05:24:14.327716",
     "exception": false,
     "start_time": "2021-10-03T05:24:11.779032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "clf.layers[0].trainable = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "54816dd0",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zganMD1yqJrW",
    "outputId": "dcc1d5dd-c72a-4c69-d613-d7ca40276906",
    "papermill": {
     "duration": 2.523909,
     "end_time": "2021-10-03T05:24:19.351687",
     "exception": false,
     "start_time": "2021-10-03T05:24:16.827778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "resnet50 (Functional)        (None, 7, 7, 2048)        23587712  \n",
      "_________________________________________________________________\n",
      "global_average_pooling2d_1 ( (None, 2048)              0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 1024)              2098176   \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 1024)              0         \n",
      "_________________________________________________________________\n",
      "classification (Dense)       (None, 101)               103525    \n",
      "=================================================================\n",
      "Total params: 25,789,413\n",
      "Trainable params: 2,201,701\n",
      "Non-trainable params: 23,587,712\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "clf.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "9d7f4770",
   "metadata": {
    "id": "H4o9F12IlJR6",
    "papermill": {
     "duration": 2.479762,
     "end_time": "2021-10-03T05:24:24.296779",
     "exception": false,
     "start_time": "2021-10-03T05:24:21.817017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#?tf.keras.optimizers.Adam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "9859d02c",
   "metadata": {
    "id": "OkEXrz9MO5Hn",
    "papermill": {
     "duration": 2.566897,
     "end_time": "2021-10-03T05:24:29.393895",
     "exception": false,
     "start_time": "2021-10-03T05:24:26.826998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "clf.compile(\n",
    "  optimizer=tf.keras.optimizers.Adam(),\n",
    "  #loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n",
    "  loss='categorical_crossentropy' ,\n",
    "  metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "6d0e22ef",
   "metadata": {
    "id": "sPDriHUBPCYG",
    "papermill": {
     "duration": 2.537631,
     "end_time": "2021-10-03T05:24:34.406338",
     "exception": false,
     "start_time": "2021-10-03T05:24:31.868707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "callbacks = [\n",
    "    tf.keras.callbacks.CSVLogger(str(str(PROJECT_NAME)+\"/artifacts/training_ResNet50.log\"))\n",
    "    ,tf.keras.callbacks.ReduceLROnPlateau(monitor = 'val_loss',patience = 3,verbose = 1)\n",
    "    ,tf.keras.callbacks.EarlyStopping(monitor = 'val_loss',patience = 3,verbose = 1)\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1d51d10",
   "metadata": {
    "id": "no2m63oz74i-",
    "papermill": {
     "duration": 2.545126,
     "end_time": "2021-10-03T05:24:39.458672",
     "exception": false,
     "start_time": "2021-10-03T05:24:36.913546",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Model results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "da8191df",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "kBqfINjVO7lY",
    "outputId": "dd0a1e79-2254-4d33-b684-aeda0dedc8cc",
    "papermill": {
     "duration": 1729.059677,
     "end_time": "2021-10-03T05:53:31.014697",
     "exception": false,
     "start_time": "2021-10-03T05:24:41.955020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 80814 images belonging to 101 classes.\n",
      "Found 20202 images belonging to 101 classes.\n",
      "Epoch 1/5\n",
      "INFO:tensorflow:batch_all_reduce: 4 all-reduces with algorithm = nccl, num_packs = 1\n",
      "INFO:tensorflow:batch_all_reduce: 4 all-reduces with algorithm = nccl, num_packs = 1\n",
      "632/632 [==============================] - 268s 424ms/step - loss: 2.6707 - accuracy: 0.3526 - val_loss: 1.9857 - val_accuracy: 0.4957\n",
      "Epoch 2/5\n",
      "632/632 [==============================] - 262s 414ms/step - loss: 2.1459 - accuracy: 0.4552 - val_loss: 1.7957 - val_accuracy: 0.5403\n",
      "Epoch 3/5\n",
      "632/632 [==============================] - 258s 408ms/step - loss: 2.0341 - accuracy: 0.4819 - val_loss: 1.7345 - val_accuracy: 0.5566\n",
      "Epoch 4/5\n",
      "632/632 [==============================] - 260s 412ms/step - loss: 1.9748 - accuracy: 0.4928 - val_loss: 1.7225 - val_accuracy: 0.5572\n",
      "Epoch 5/5\n",
      "632/632 [==============================] - 263s 417ms/step - loss: 1.9198 - accuracy: 0.5072 - val_loss: 1.6776 - val_accuracy: 0.5712\n",
      "CPU times: user 2h 28min 55s, sys: 9min 11s, total: 2h 38min 7s\n",
      "Wall time: 22min 26s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "image_data_gen_train , image_data_gen_validation  = get_image_data_generator (preprocessing_function=tf.keras.applications.resnet50.preprocess_input)\n",
    "\n",
    "history = clf.fit(image_data_gen_train\n",
    "                        ,epochs=5\n",
    "                        ,workers=8 \n",
    "                        ,callbacks=callbacks\n",
    "                        ,validation_data=image_data_gen_validation\n",
    "                 )\n",
    "                    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "def145ef",
   "metadata": {
    "id": "iiSVGKSaK-Zg",
    "papermill": {
     "duration": 4.899062,
     "end_time": "2021-10-03T05:53:40.897912",
     "exception": false,
     "start_time": "2021-10-03T05:53:35.998850",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Save model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "c4fa504d",
   "metadata": {
    "id": "OkuoCV-TPNBR",
    "papermill": {
     "duration": 5.181637,
     "end_time": "2021-10-03T05:53:51.078620",
     "exception": false,
     "start_time": "2021-10-03T05:53:45.896983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "export_path = str(PROJECT_NAME)+\"/artifacts/model_ResNet50.h5\"\n",
    "export_path\n",
    "clf.save(export_path, save_format='h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a0f49fd",
   "metadata": {
    "id": "WsF-EVy9Jlcv",
    "papermill": {
     "duration": 4.902006,
     "end_time": "2021-10-03T05:54:00.855778",
     "exception": false,
     "start_time": "2021-10-03T05:53:55.953772",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model 3: MobileNetV2 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "ce661ecb",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "IJf_j5gZrri8",
    "outputId": "91a6d57a-f45e-4e53-8147-a8e3377b1422",
    "papermill": {
     "duration": 6.816395,
     "end_time": "2021-10-03T05:54:12.667271",
     "exception": false,
     "start_time": "2021-10-03T05:54:05.850876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "IMAGE_SHAPE = (IMG_HEIGHT, IMG_WIDTH)\n",
    "\n",
    "def get_mobile_net_v2():\n",
    "    base_layer = tf.keras.applications.MobileNetV2(weights='imagenet',include_top=False,input_shape=IMAGE_SHAPE+(3,) )\n",
    "    \n",
    "    model = tf.keras.Sequential([\n",
    "        #hub.KerasLayer(classifier_url, input_shape=IMAGE_SHAPE+(3,) , name='pretrained')\n",
    "        base_layer\n",
    "        , tf.keras.layers.GlobalAveragePooling2D()\n",
    "        , tf.keras.layers.Dense(1024, activation='relu')\n",
    "\n",
    "        ,tf.keras.layers.Dense(image_data_gen_train.num_classes , name='classification', activation='softmax')\n",
    "\n",
    "    ])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "30b2dd85",
   "metadata": {
    "id": "bJvUxM1tLb-S",
    "papermill": {
     "duration": 4.944843,
     "end_time": "2021-10-03T05:54:22.477396",
     "exception": false,
     "start_time": "2021-10-03T05:54:17.532553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "with strategy.scope():\n",
    "    clf = get_mobile_net_v2()\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "a98f53a1",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_e1fdYmjryAr",
    "outputId": "dbb30189-023e-4553-bd24-7859bfb86260",
    "papermill": {
     "duration": 4.920045,
     "end_time": "2021-10-03T05:54:32.356201",
     "exception": false,
     "start_time": "2021-10-03T05:54:27.436156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_3\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "mobilenetv2_1.00_224 (Functi (None, 7, 7, 1280)        2257984   \n",
      "_________________________________________________________________\n",
      "global_average_pooling2d_3 ( (None, 1280)              0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 1024)              1311744   \n",
      "_________________________________________________________________\n",
      "classification (Dense)       (None, 101)               103525    \n",
      "=================================================================\n",
      "Total params: 3,673,253\n",
      "Trainable params: 3,639,141\n",
      "Non-trainable params: 34,112\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "clf.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "bb3ce41a",
   "metadata": {
    "id": "klcCgifJr3bB",
    "papermill": {
     "duration": 4.984329,
     "end_time": "2021-10-03T05:54:42.319233",
     "exception": false,
     "start_time": "2021-10-03T05:54:37.334904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# keep base network layers frozen\n",
    "clf.layers[0].trainable = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "3bb5246b",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "hN4dpQOYr76J",
    "outputId": "fd8d92db-d4a8-4280-b21e-10756525c02a",
    "papermill": {
     "duration": 4.844219,
     "end_time": "2021-10-03T05:54:52.153525",
     "exception": false,
     "start_time": "2021-10-03T05:54:47.309306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_3\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "mobilenetv2_1.00_224 (Functi (None, 7, 7, 1280)        2257984   \n",
      "_________________________________________________________________\n",
      "global_average_pooling2d_3 ( (None, 1280)              0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 1024)              1311744   \n",
      "_________________________________________________________________\n",
      "classification (Dense)       (None, 101)               103525    \n",
      "=================================================================\n",
      "Total params: 3,673,253\n",
      "Trainable params: 1,415,269\n",
      "Non-trainable params: 2,257,984\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "clf.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "4a76416f",
   "metadata": {
    "id": "7RDTGc3ar9aI",
    "papermill": {
     "duration": 4.946153,
     "end_time": "2021-10-03T05:55:01.996841",
     "exception": false,
     "start_time": "2021-10-03T05:54:57.050688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "clf.compile(\n",
    "  optimizer=tf.keras.optimizers.Adam(),\n",
    "  #loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n",
    "  loss='categorical_crossentropy' ,\n",
    "  metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "21dbe2f6",
   "metadata": {
    "id": "bH81egKcsA5S",
    "papermill": {
     "duration": 4.857372,
     "end_time": "2021-10-03T05:55:11.858374",
     "exception": false,
     "start_time": "2021-10-03T05:55:07.001002",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "callbacks = [\n",
    "    tf.keras.callbacks.CSVLogger(str(str(PROJECT_NAME)+\"/artifacts/training_MobileNetV2.log\"))\n",
    "    ,tf.keras.callbacks.ReduceLROnPlateau(monitor = 'val_loss',patience = 3,verbose = 1)\n",
    "    ,tf.keras.callbacks.EarlyStopping(monitor = 'val_loss',patience = 3,verbose = 1,restore_best_weights = False)\n",
    "]\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22c0790a",
   "metadata": {
    "id": "ucJhHQhH7_YH",
    "papermill": {
     "duration": 4.904183,
     "end_time": "2021-10-03T05:55:21.748120",
     "exception": false,
     "start_time": "2021-10-03T05:55:16.843937",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Model results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "69fbd036",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "O2rrFiAwsD3a",
    "outputId": "033c332b-a73d-4f87-8003-3a1c4004990c",
    "papermill": {
     "duration": 1152.825328,
     "end_time": "2021-10-03T06:14:39.521033",
     "exception": false,
     "start_time": "2021-10-03T05:55:26.695705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 80814 images belonging to 101 classes.\n",
      "Found 20202 images belonging to 101 classes.\n",
      "Epoch 1/5\n",
      "INFO:tensorflow:batch_all_reduce: 4 all-reduces with algorithm = nccl, num_packs = 1\n",
      "INFO:tensorflow:batch_all_reduce: 4 all-reduces with algorithm = nccl, num_packs = 1\n",
      "632/632 [==============================] - 257s 407ms/step - loss: 2.2146 - accuracy: 0.4496 - val_loss: 1.9490 - val_accuracy: 0.5070\n",
      "Epoch 2/5\n",
      "632/632 [==============================] - 254s 401ms/step - loss: 1.8109 - accuracy: 0.5333 - val_loss: 1.8719 - val_accuracy: 0.5222\n",
      "Epoch 3/5\n",
      "632/632 [==============================] - 253s 400ms/step - loss: 1.6986 - accuracy: 0.5563 - val_loss: 1.8750 - val_accuracy: 0.5223\n",
      "Epoch 4/5\n",
      "632/632 [==============================] - 254s 402ms/step - loss: 1.6180 - accuracy: 0.5734 - val_loss: 1.8218 - val_accuracy: 0.5372\n",
      "Epoch 5/5\n",
      "632/632 [==============================] - 252s 398ms/step - loss: 1.5508 - accuracy: 0.5885 - val_loss: 1.8155 - val_accuracy: 0.5376\n",
      "CPU times: user 2h 17min 50s, sys: 8min 44s, total: 2h 26min 34s\n",
      "Wall time: 21min 42s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "image_data_gen_train , image_data_gen_validation = get_image_data_generator (preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input)\n",
    "\n",
    "history = clf.fit(image_data_gen_train\n",
    "                  ,epochs=5\n",
    "                  ,workers=8 \n",
    "                  ,callbacks=callbacks\n",
    "                  ,validation_data=image_data_gen_validation\n",
    "                  )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a32ab13f",
   "metadata": {
    "id": "Uar_usQIzibr",
    "papermill": {
     "duration": 6.508372,
     "end_time": "2021-10-03T06:14:52.549568",
     "exception": false,
     "start_time": "2021-10-03T06:14:46.041196",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Save model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "67c17abe",
   "metadata": {
    "id": "KrRK4qJyBhGB",
    "papermill": {
     "duration": 6.634685,
     "end_time": "2021-10-03T06:15:05.782676",
     "exception": false,
     "start_time": "2021-10-03T06:14:59.147991",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# with open(f\"{PROJECT_NAME}/artifacts/classes.json\",'w') as f:\n",
    "#   json.dump(USE_CLASS_NAMES, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "8d23a64e",
   "metadata": {
    "id": "tC5E_rs5sObm",
    "papermill": {
     "duration": 6.863728,
     "end_time": "2021-10-03T06:15:19.248998",
     "exception": false,
     "start_time": "2021-10-03T06:15:12.385270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "export_path = str(PROJECT_NAME)+\"/artifacts/model_MobileNetV2.h5\"\n",
    "export_path\n",
    "clf.save(export_path, save_format='h5')\n",
    "\n",
    "#clf.save(export_path, save_format='tf')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3424b9c",
   "metadata": {
    "id": "SG1yctSYSKTP",
    "papermill": {
     "duration": 6.760255,
     "end_time": "2021-10-03T06:16:14.070861",
     "exception": false,
     "start_time": "2021-10-03T06:16:07.310606",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model 3: MobileNetV2 (fine-tuned)\n",
    "\n",
    "https://www.tensorflow.org/guide/keras/transfer_learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "05cedd9d",
   "metadata": {
    "id": "c7UE9J70QiRS",
    "papermill": {
     "duration": 8.618381,
     "end_time": "2021-10-03T06:16:56.351907",
     "exception": false,
     "start_time": "2021-10-03T06:16:47.733526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "IMAGE_SHAPE = (IMG_HEIGHT, IMG_WIDTH)\n",
    "\n",
    "with strategy.scope():\n",
    "    clf = get_mobile_net_v2()\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "26427099",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "1SDnt7ilQimg",
    "outputId": "27ebe008-2ef9-4f0a-f258-ef35849a6930",
    "papermill": {
     "duration": 6.657833,
     "end_time": "2021-10-03T06:17:23.053418",
     "exception": false,
     "start_time": "2021-10-03T06:17:16.395585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "mobilenetv2_1.00_224 (Functi (None, 7, 7, 1280)        2257984   \n",
      "_________________________________________________________________\n",
      "global_average_pooling2d_4 ( (None, 1280)              0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 1024)              1311744   \n",
      "_________________________________________________________________\n",
      "classification (Dense)       (None, 101)               103525    \n",
      "=================================================================\n",
      "Total params: 3,673,253\n",
      "Trainable params: 3,639,141\n",
      "Non-trainable params: 34,112\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "clf.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "e8c289da",
   "metadata": {
    "id": "Wy20L5NMQi--",
    "papermill": {
     "duration": 6.701285,
     "end_time": "2021-10-03T06:17:36.465795",
     "exception": false,
     "start_time": "2021-10-03T06:17:29.764510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "clf.layers[0].trainable = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "247649d7",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Htfe6pFhTe5Y",
    "outputId": "c339cbea-4115-4ec8-fcbc-a0cc3aefb95e",
    "papermill": {
     "duration": 6.802493,
     "end_time": "2021-10-03T06:17:49.995538",
     "exception": false,
     "start_time": "2021-10-03T06:17:43.193045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "mobilenetv2_1.00_224 (Functi (None, 7, 7, 1280)        2257984   \n",
      "_________________________________________________________________\n",
      "global_average_pooling2d_4 ( (None, 1280)              0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 1024)              1311744   \n",
      "_________________________________________________________________\n",
      "classification (Dense)       (None, 101)               103525    \n",
      "=================================================================\n",
      "Total params: 3,673,253\n",
      "Trainable params: 1,415,269\n",
      "Non-trainable params: 2,257,984\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "clf.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "78abcd03",
   "metadata": {
    "id": "jxWR5mHRTe2z",
    "papermill": {
     "duration": 6.827541,
     "end_time": "2021-10-03T06:18:03.605233",
     "exception": false,
     "start_time": "2021-10-03T06:17:56.777692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "clf.compile(\n",
    "  optimizer=tf.keras.optimizers.Adam(),\n",
    "  #loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n",
    "  loss='categorical_crossentropy' ,\n",
    "  metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "4a1ea07f",
   "metadata": {
    "id": "KfyiGqzaTnqg",
    "papermill": {
     "duration": 6.754076,
     "end_time": "2021-10-03T06:18:17.197043",
     "exception": false,
     "start_time": "2021-10-03T06:18:10.442967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "callbacks = [\n",
    "    tf.keras.callbacks.CSVLogger(str(str(PROJECT_NAME)+\"/artifacts/training_MobileNetV2.log\"))\n",
    "    ,tf.keras.callbacks.ReduceLROnPlateau(monitor = 'val_loss',patience = 3,verbose = 1)\n",
    "    ,tf.keras.callbacks.EarlyStopping(monitor = 'val_loss',patience = 3,verbose = 1,restore_best_weights = False)\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df289b4d",
   "metadata": {
    "id": "XaXHE_BCUN70",
    "papermill": {
     "duration": 6.693997,
     "end_time": "2021-10-03T06:18:30.545354",
     "exception": false,
     "start_time": "2021-10-03T06:18:23.851357",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### epochs = 9 \n",
    "- increase batch size until accuracy decreases\n",
    "- then rerun from beginning using epoch size where max accuracy was observed"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fd98f61",
   "metadata": {
    "id": "jiTwQ3fu8Dp1",
    "papermill": {
     "duration": 6.733697,
     "end_time": "2021-10-03T06:18:44.060508",
     "exception": false,
     "start_time": "2021-10-03T06:18:37.326811",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Model results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "c2cb224c",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "JdxVDXtOTn7F",
    "outputId": "f2524a54-1dca-4c20-c972-fdf3a119fecf",
    "papermill": {
     "duration": 1176.080011,
     "end_time": "2021-10-03T06:38:26.839176",
     "exception": false,
     "start_time": "2021-10-03T06:18:50.759165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 80814 images belonging to 101 classes.\n",
      "Found 20202 images belonging to 101 classes.\n",
      "Epoch 1/5\n",
      "INFO:tensorflow:batch_all_reduce: 4 all-reduces with algorithm = nccl, num_packs = 1\n",
      "INFO:tensorflow:batch_all_reduce: 4 all-reduces with algorithm = nccl, num_packs = 1\n",
      "632/632 [==============================] - 259s 409ms/step - loss: 2.2295 - accuracy: 0.4473 - val_loss: 1.9525 - val_accuracy: 0.5048\n",
      "Epoch 2/5\n",
      "632/632 [==============================] - 255s 403ms/step - loss: 1.8187 - accuracy: 0.5314 - val_loss: 1.8685 - val_accuracy: 0.5238\n",
      "Epoch 3/5\n",
      "632/632 [==============================] - 256s 405ms/step - loss: 1.6994 - accuracy: 0.5578 - val_loss: 1.8350 - val_accuracy: 0.5329\n",
      "Epoch 4/5\n",
      "632/632 [==============================] - 255s 404ms/step - loss: 1.6097 - accuracy: 0.5756 - val_loss: 1.8055 - val_accuracy: 0.5380\n",
      "Epoch 5/5\n",
      "632/632 [==============================] - 255s 403ms/step - loss: 1.5506 - accuracy: 0.5908 - val_loss: 1.8069 - val_accuracy: 0.5478\n",
      "CPU times: user 2h 18min 39s, sys: 8min 46s, total: 2h 27min 26s\n",
      "Wall time: 21min 51s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# changed epochs=3 to epochs=9\n",
    "image_data_gen_train , image_data_gen_validation = get_image_data_generator (preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input)\n",
    "\n",
    "history = clf.fit(image_data_gen_train\n",
    "                  ,validation_data=image_data_gen_validation\n",
    "                        ,epochs=5\n",
    "                        ,workers=8 \n",
    "                        ,callbacks=callbacks\n",
    "                        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "e7906b38",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "D2mb8YZhc1l7",
    "outputId": "fd7a4a0d-4c21-40a5-f393-65fd9d11e63f",
    "papermill": {
     "duration": 8.607393,
     "end_time": "2021-10-03T06:38:43.905554",
     "exception": false,
     "start_time": "2021-10-03T06:38:35.298161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "mobilenetv2_1.00_224 (Functi (None, 7, 7, 1280)        2257984   \n",
      "_________________________________________________________________\n",
      "global_average_pooling2d_4 ( (None, 1280)              0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 1024)              1311744   \n",
      "_________________________________________________________________\n",
      "classification (Dense)       (None, 101)               103525    \n",
      "=================================================================\n",
      "Total params: 3,673,253\n",
      "Trainable params: 3,639,141\n",
      "Non-trainable params: 34,112\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# unfreeze first layer\n",
    "clf.layers[0].trainable = True\n",
    "clf.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "025ee14e",
   "metadata": {
    "id": "Gf2PBK9VdCT1",
    "papermill": {
     "duration": 8.407334,
     "end_time": "2021-10-03T06:39:00.841624",
     "exception": false,
     "start_time": "2021-10-03T06:38:52.434290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "base_learning_rate=0.001\n",
    "\n",
    "clf.compile(\n",
    "  optimizer=tf.keras.optimizers.RMSprop(lr=base_learning_rate/10),\n",
    "  #loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n",
    "  loss='categorical_crossentropy' ,\n",
    "  metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "cc03060a",
   "metadata": {
    "id": "KIE2YrOgdA6s",
    "papermill": {
     "duration": 8.574904,
     "end_time": "2021-10-03T06:39:17.771941",
     "exception": false,
     "start_time": "2021-10-03T06:39:09.197037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "callbacks = [\n",
    "    tf.keras.callbacks.CSVLogger(str(str(PROJECT_NAME)+\"/artifacts/training_MobileNetV2_ft2.log\"))\n",
    "    ,tf.keras.callbacks.ReduceLROnPlateau(monitor = 'val_loss',patience = 3,verbose = 1)\n",
    "    ,tf.keras.callbacks.EarlyStopping(monitor = 'val_loss',patience = 3,verbose = 1,restore_best_weights = False)\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1d53940",
   "metadata": {
    "id": "WKklf8kI8I7C",
    "papermill": {
     "duration": 8.638429,
     "end_time": "2021-10-03T06:39:34.943057",
     "exception": false,
     "start_time": "2021-10-03T06:39:26.304628",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Model results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "c3f7a931",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "9BzSdoJkdJmv",
    "outputId": "f384917a-e58a-4eba-c9ce-1370cda5dce7",
    "papermill": {
     "duration": 5668.174418,
     "end_time": "2021-10-03T08:14:11.637535",
     "exception": false,
     "start_time": "2021-10-03T06:39:43.463117",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 80814 images belonging to 101 classes.\n",
      "Found 20202 images belonging to 101 classes.\n",
      "Epoch 1/5\n",
      "INFO:tensorflow:batch_all_reduce: 160 all-reduces with algorithm = nccl, num_packs = 1\n",
      "INFO:tensorflow:batch_all_reduce: 160 all-reduces with algorithm = nccl, num_packs = 1\n",
      "632/632 [==============================] - 286s 453ms/step - loss: 1.5090 - accuracy: 0.6016 - val_loss: 2.1701 - val_accuracy: 0.5061\n",
      "Epoch 2/5\n",
      "632/632 [==============================] - 276s 437ms/step - loss: 1.1614 - accuracy: 0.6854 - val_loss: 1.8666 - val_accuracy: 0.5708\n",
      "Epoch 3/5\n",
      "632/632 [==============================] - 278s 440ms/step - loss: 1.0287 - accuracy: 0.7195 - val_loss: 1.4875 - val_accuracy: 0.6432\n",
      "Epoch 4/5\n",
      "632/632 [==============================] - 279s 441ms/step - loss: 0.9288 - accuracy: 0.7437 - val_loss: 1.4206 - val_accuracy: 0.6545\n",
      "Epoch 5/5\n",
      "632/632 [==============================] - 276s 437ms/step - loss: 0.8478 - accuracy: 0.7628 - val_loss: 1.3831 - val_accuracy: 0.6610\n",
      "CPU times: user 2h 52min 16s, sys: 10min 43s, total: 3h 3min\n",
      "Wall time: 24min 41s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "history = clf.fit(image_data_gen_train\n",
    "                   ,validation_data=image_data_gen_validation\n",
    "                        ,epochs=5\n",
    "                        ,workers=8 \n",
    "                        ,callbacks=callbacks\n",
    "                        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3c9ad0f-1dea-4508-816e-d491418c30c7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d6de512-5572-4391-a353-4d3b69a26d82",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "44ebcd3a",
   "metadata": {
    "id": "DT4AteZDSnKr",
    "papermill": {
     "duration": 13.538965,
     "end_time": "2021-10-03T08:14:38.601448",
     "exception": false,
     "start_time": "2021-10-03T08:14:25.062483",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Save model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "98f8eb0e",
   "metadata": {
    "id": "bj3ZLhThSsK4",
    "papermill": {
     "duration": 14.086174,
     "end_time": "2021-10-03T08:15:06.225047",
     "exception": false,
     "start_time": "2021-10-03T08:14:52.138873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "export_path = str(PROJECT_NAME)+\"/artifacts/model_MobileNetV2_ft.h5\"\n",
    "export_path\n",
    "clf.save(export_path, save_format='h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "b6dc4823",
   "metadata": {
    "id": "Its7kc8VsNzj",
    "papermill": {
     "duration": 13.718766,
     "end_time": "2021-10-03T08:15:33.725018",
     "exception": false,
     "start_time": "2021-10-03T08:15:20.006252",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "clf_final = clf "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a193aacb-0e84-4b09-bbbb-c454fdc34e2c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "e15ca03a-f858-43f8-b83f-180bb91b0f4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_of_classes = list(image_data_gen_train.class_indices.keys())\n",
    "with open(f\"{PROJECT_NAME}/artifacts/classes.json\",'w') as f:\n",
    "    json.dump(list(image_data_gen_train.class_indices.keys()) , f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fc141be",
   "metadata": {
    "id": "yMc4g4VJw9hA",
    "papermill": {
     "duration": 13.736442,
     "end_time": "2021-10-03T08:16:01.172039",
     "exception": false,
     "start_time": "2021-10-03T08:15:47.435597",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Time to Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "8c516914",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "tqKB6VX3Ssf8",
    "outputId": "e90a17ef-b254-4ee8-9faf-c5fc3f009026",
    "papermill": {
     "duration": 13.82191,
     "end_time": "2021-10-03T08:16:28.508434",
     "exception": false,
     "start_time": "2021-10-03T08:16:14.686524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "End Time = 19:14:52\n"
     ]
    }
   ],
   "source": [
    "now2 = datetime.now()\n",
    "\n",
    "end_time = now2.strftime(\"%H:%M:%S\")\n",
    "print(\"End Time =\", end_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "62102d24",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "eThpapNJxDET",
    "outputId": "809021dd-fbed-4206-b93f-77b474c0ef12",
    "papermill": {
     "duration": 13.763369,
     "end_time": "2021-10-03T08:16:55.848567",
     "exception": false,
     "start_time": "2021-10-03T08:16:42.085198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time to run (minutes):  125.46438256666667\n"
     ]
    }
   ],
   "source": [
    "diff2=((now2-now1).total_seconds() )/ (60)\n",
    "print(\"Time to run (minutes): \", diff2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6bcc257",
   "metadata": {
    "id": "Bk6M8HvofvTR",
    "papermill": {
     "duration": 13.88821,
     "end_time": "2021-10-03T08:17:23.466542",
     "exception": false,
     "start_time": "2021-10-03T08:17:09.578332",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Get Model Size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "a234de59",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "bWPA6uYlUyBV",
    "outputId": "c3568bb5-6118-4339-a34b-036100d3f198",
    "papermill": {
     "duration": 14.012323,
     "end_time": "2021-10-03T08:17:51.221920",
     "exception": false,
     "start_time": "2021-10-03T08:17:37.209597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "253M\tproject_food_dl/artifacts\n"
     ]
    }
   ],
   "source": [
    "! du -h {PROJECT_NAME}/artifacts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "d69af456",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "fbIPxgoN3zvd",
    "outputId": "d823b4a9-39e7-416a-a9ab-b2c5b9e5d682",
    "papermill": {
     "duration": 14.205215,
     "end_time": "2021-10-03T08:18:19.409229",
     "exception": false,
     "start_time": "2021-10-03T08:18:05.204014",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 253M\n",
      "drwxr-xr-x 2 jupyter jupyter 4.0K Oct  9 19:14 .\n",
      "drwxr-xr-x 5 jupyter jupyter 4.0K Oct  9 17:09 ..\n",
      "-rw-r--r-- 1 jupyter jupyter 1.5K Oct  9 19:14 classes.json\n",
      "-rw-r--r-- 1 jupyter jupyter  26M Oct  9 18:27 model_MobileNetV2.h5\n",
      "-rw-r--r-- 1 jupyter jupyter  29M Oct  9 19:14 model_MobileNetV2_ft.h5\n",
      "-rw-r--r-- 1 jupyter jupyter 116M Oct  9 17:59 model_ResNet50.h5\n",
      "-rw-r--r-- 1 jupyter jupyter  84M Oct  9 17:36 model_VGG19.h5\n",
      "-rw-r--r-- 1 jupyter jupyter  432 Oct  9 18:50 training_MobileNetV2.log\n",
      "-rw-r--r-- 1 jupyter jupyter  429 Oct  9 19:14 training_MobileNetV2_ft2.log\n",
      "-rw-r--r-- 1 jupyter jupyter  438 Oct  9 17:59 training_ResNet50.log\n",
      "-rw-r--r-- 1 jupyter jupyter  429 Oct  9 17:36 training_VGG19.log\n"
     ]
    }
   ],
   "source": [
    "!ls {PROJECT_NAME}/artifacts/ -lah"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0bb023b",
   "metadata": {
    "id": "bILr-eFU-wUG",
    "papermill": {
     "duration": 13.80113,
     "end_time": "2021-10-03T08:18:47.079945",
     "exception": false,
     "start_time": "2021-10-03T08:18:33.278815",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Compare Models\n",
    "\n",
    "- Dataset:  Food\n",
    "- Classes: 101\n",
    "- Total images: 101000\n",
    "- Batch size: 32\n",
    "\n",
    "| Model  | Trainable Params| Non-trainable Params | Time (hh:mm:ss) [a]| Accuracy | Epochs | Model Size [b]\n",
    "|---|---:|---:|---:|---:| ---:|---:|\n",
    "| VGG19| 628,837   | 20,024,384 | 00:22:50 | 50.1% | 5 | 84M\n",
    "| ResNet50   | 2,201,701   | 23,587,712 |  00:22:26 | 57.2% | 5 | 116M\n",
    "| MobileNetV2  | 1,415,269  | 2,257,984 |   00:21:42 | 53.7% | 5 | 26M\n",
    "| MobileNetV2_ft [c]  | 3,639,141  | 34,112 | 00:45:00   | 66.1% | 10 | 29M\n",
    "\n",
    "NOTES:  \n",
    "- [a] If wall clock time < CPU time, then you're executing a program in parallel.\n",
    "- [b] model size is size of output file\n",
    "- [c] ft = fine-tuned; time 11min ; 24min; epochs 5+5; model trained on 4 nvidia-t4\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52bfbbf7",
   "metadata": {
    "id": "0K-dkX_Jgn0R",
    "papermill": {
     "duration": 13.84566,
     "end_time": "2021-10-03T08:19:14.720726",
     "exception": false,
     "start_time": "2021-10-03T08:19:00.875066",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "970d21bb",
   "metadata": {
    "id": "oh76dgMeVIDD",
    "papermill": {
     "duration": 13.923928,
     "end_time": "2021-10-03T08:19:42.470917",
     "exception": false,
     "start_time": "2021-10-03T08:19:28.546989",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Download Assets\n",
    "#### download MobileNetV2 model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "db8e8083",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "jqxTNOVCoHCc",
    "outputId": "479091cb-7223-4ae8-f206-905e08fcab6f",
    "papermill": {
     "duration": 27.547268,
     "end_time": "2021-10-03T08:20:23.706142",
     "exception": false,
     "start_time": "2021-10-03T08:19:56.158874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  adding: project_food_dl/artifacts/ (stored 0%)\n",
      "  adding: project_food_dl/artifacts/training_MobileNetV2.log (deflated 43%)\n",
      "  adding: project_food_dl/artifacts/training_ResNet50.log (deflated 43%)\n",
      "  adding: project_food_dl/artifacts/model_VGG19.h5 (deflated 8%)\n",
      "  adding: project_food_dl/artifacts/model_MobileNetV2_ft.h5 (deflated 13%)\n",
      "  adding: project_food_dl/artifacts/training_VGG19.log (deflated 43%)\n",
      "  adding: project_food_dl/artifacts/training_MobileNetV2_ft2.log (deflated 42%)\n",
      "  adding: project_food_dl/artifacts/model_ResNet50.h5 (deflated 11%)\n",
      "  adding: project_food_dl/artifacts/classes.json (deflated 56%)\n",
      "  adding: project_food_dl/artifacts/model_MobileNetV2.h5 (deflated 10%)\n"
     ]
    }
   ],
   "source": [
    "!zip -r {PROJECT_NAME}/artifacts/artifacts.zip {PROJECT_NAME}/artifacts/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "98a96caf",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 17
    },
    "id": "63KIL2HndL-c",
    "outputId": "0f7cdc5b-5b6c-49cd-fb9b-5202384b902f",
    "papermill": {
     "duration": 14.189453,
     "end_time": "2021-10-03T08:20:51.758552",
     "exception": false,
     "start_time": "2021-10-03T08:20:37.569099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#from google.colab import files\n",
    "#files.download(str(str(PROJECT_NAME)+\"/artifacts/artifacts.zip\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae676674",
   "metadata": {
    "id": "GVrj_UAD-xDr",
    "papermill": {
     "duration": 14.138976,
     "end_time": "2021-10-03T08:21:19.911772",
     "exception": false,
     "start_time": "2021-10-03T08:21:05.772796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cc5018a0",
   "metadata": {
    "id": "v_gyW7wtzt5W",
    "papermill": {
     "duration": 13.890061,
     "end_time": "2021-10-03T08:21:47.751579",
     "exception": false,
     "start_time": "2021-10-03T08:21:33.861518",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "6a7bdae8",
   "metadata": {
    "id": "WWK6eUGw5T4n",
    "papermill": {
     "duration": 14.209385,
     "end_time": "2021-10-03T08:22:15.747930",
     "exception": false,
     "start_time": "2021-10-03T08:22:01.538545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# if you want to delete a directory from past runs\n",
    "!rm -rf {PROJECT_NAME}/test_image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "35c36909",
   "metadata": {
    "id": "WUnud1rfurW-",
    "papermill": {
     "duration": 14.140948,
     "end_time": "2021-10-03T08:22:43.726595",
     "exception": false,
     "start_time": "2021-10-03T08:22:29.585647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# create a sub-directory for data\n",
    "!mkdir -p {PROJECT_NAME}/test_image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "64833482",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "CsZJ0GOBHVQ_",
    "outputId": "e593568b-a8de-49d9-9928-cabeae216005",
    "papermill": {
     "duration": 14.661665,
     "end_time": "2021-10-03T08:23:12.274339",
     "exception": false,
     "start_time": "2021-10-03T08:22:57.612674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2021-10-09 19:15:17--  https://upload.wikimedia.org/wikipedia/commons/9/99/Black_square.jpg\n",
      "Resolving upload.wikimedia.org (upload.wikimedia.org)... 208.80.153.240, 2620:0:860:ed1a::2:b\n",
      "Connecting to upload.wikimedia.org (upload.wikimedia.org)|208.80.153.240|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 5450 (5.3K) [image/jpeg]\n",
      "Saving to: ‘project_food_dl/test_image/black_square.jpg’\n",
      "\n",
      "black_square.jpg    100%[===================>]   5.32K  --.-KB/s    in 0s      \n",
      "\n",
      "2021-10-09 19:15:17 (341 MB/s) - ‘project_food_dl/test_image/black_square.jpg’ saved [5450/5450]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget https://upload.wikimedia.org/wikipedia/commons/9/99/Black_square.jpg -P {PROJECT_NAME}/test_image -O {PROJECT_NAME}/test_image/black_square.jpg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "a930ba7b",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "TWO4QVmhIGkw",
    "outputId": "3bee57fb-38c5-45b2-dad9-6de4cd37b239",
    "papermill": {
     "duration": 14.723049,
     "end_time": "2021-10-03T08:23:40.946210",
     "exception": false,
     "start_time": "2021-10-03T08:23:26.223161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2021-10-09 19:15:18--  https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Solanum_melongena_24_08_2012_%281%29.JPG/1280px-Solanum_melongena_24_08_2012_%281%29.JPG\n",
      "Resolving upload.wikimedia.org (upload.wikimedia.org)... 208.80.153.240, 2620:0:860:ed1a::2:b\n",
      "Connecting to upload.wikimedia.org (upload.wikimedia.org)|208.80.153.240|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 387048 (378K) [image/jpeg]\n",
      "Saving to: ‘project_food_dl/test_image/eggplant.jpg’\n",
      "\n",
      "eggplant.jpg        100%[===================>] 377.98K  1.26MB/s    in 0.3s    \n",
      "\n",
      "2021-10-09 19:15:18 (1.26 MB/s) - ‘project_food_dl/test_image/eggplant.jpg’ saved [387048/387048]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Solanum_melongena_24_08_2012_%281%29.JPG/1280px-Solanum_melongena_24_08_2012_%281%29.JPG  -P {PROJECT_NAME}/test_image -O {PROJECT_NAME}/test_image/eggplant.jpg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "c3806e57",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "BbYvKQOzGfRO",
    "outputId": "92a9ba52-3647-4c4f-ebfa-a73c6d86e6f2",
    "papermill": {
     "duration": 14.293941,
     "end_time": "2021-10-03T08:24:09.252178",
     "exception": false,
     "start_time": "2021-10-03T08:23:54.958237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2021-10-09 19:15:19--  https://image.shutterstock.com/image-photo/brown-light-wooden-round-dining-260nw-588358070.jpg\n",
      "Resolving image.shutterstock.com (image.shutterstock.com)... 13.225.50.61, 13.225.50.43, 13.225.50.25, ...\n",
      "Connecting to image.shutterstock.com (image.shutterstock.com)|13.225.50.61|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 11954 (12K) [image/jpeg]\n",
      "Saving to: ‘project_food_dl/test_image/table.jpg’\n",
      "\n",
      "table.jpg           100%[===================>]  11.67K  --.-KB/s    in 0.001s  \n",
      "\n",
      "2021-10-09 19:15:19 (8.44 MB/s) - ‘project_food_dl/test_image/table.jpg’ saved [11954/11954]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# \n",
    "! wget https://image.shutterstock.com/image-photo/brown-light-wooden-round-dining-260nw-588358070.jpg -P {PROJECT_NAME}/test_image  -O {PROJECT_NAME}/test_image/table.jpg\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "1847bfb5",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "klyr7CaZzbiA",
    "outputId": "372d88e6-e8dd-48c8-931a-4d6b596172e6",
    "papermill": {
     "duration": 15.006575,
     "end_time": "2021-10-03T08:24:37.951787",
     "exception": false,
     "start_time": "2021-10-03T08:24:22.945212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2021-10-09 19:15:19--  https://upload.wikimedia.org/wikipedia/commons/6/61/Small_apple_pie_8.jpg\n",
      "Resolving upload.wikimedia.org (upload.wikimedia.org)... 208.80.153.240, 2620:0:860:ed1a::2:b\n",
      "Connecting to upload.wikimedia.org (upload.wikimedia.org)|208.80.153.240|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 6127171 (5.8M) [image/jpeg]\n",
      "Saving to: ‘project_food_dl/test_image/apple_pie.jpg’\n",
      "\n",
      "apple_pie.jpg       100%[===================>]   5.84M  6.07MB/s    in 1.0s    \n",
      "\n",
      "2021-10-09 19:15:20 (6.07 MB/s) - ‘project_food_dl/test_image/apple_pie.jpg’ saved [6127171/6127171]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "! wget https://upload.wikimedia.org/wikipedia/commons/6/61/Small_apple_pie_8.jpg -P {PROJECT_NAME}/test_image  -O {PROJECT_NAME}/test_image/apple_pie.jpg\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "27315996-e3c9-403b-bb04-d7f6ff828d43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2021-10-09 19:15:21--  https://italianmeddiet.com/wp-content/uploads/Baklava-0470-575x262.jpg\n",
      "Resolving italianmeddiet.com (italianmeddiet.com)... 74.208.236.143\n",
      "Connecting to italianmeddiet.com (italianmeddiet.com)|74.208.236.143|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 27481 (27K) [image/jpeg]\n",
      "Saving to: ‘project_food_dl/test_image/baklava.jpg’\n",
      "\n",
      "baklava.jpg         100%[===================>]  26.84K  --.-KB/s    in 0.04s   \n",
      "\n",
      "2021-10-09 19:15:21 (600 KB/s) - ‘project_food_dl/test_image/baklava.jpg’ saved [27481/27481]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "! wget https://italianmeddiet.com/wp-content/uploads/Baklava-0470-575x262.jpg -P {PROJECT_NAME}/test_image  -O {PROJECT_NAME}/test_image/baklava.jpg\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "9c6e184d",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 35
    },
    "id": "V0nAfbdGHfDV",
    "outputId": "14f56a09-e2d0-4d49-bebf-3279939548b5",
    "papermill": {
     "duration": 13.849319,
     "end_time": "2021-10-03T08:25:05.622021",
     "exception": false,
     "start_time": "2021-10-03T08:24:51.772702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'project_food_dl/test_image/baklava.jpg'"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img_path = f\"{PROJECT_NAME}/test_image/eggplant.jpg\" # not in dataset\n",
    "img_path = f\"{PROJECT_NAME}/test_image/table.jpg\"\n",
    "img_path = f\"{PROJECT_NAME}/test_image/black_square.jpg\"\n",
    "img_path = f\"{PROJECT_NAME}/test_image/apple_pie.jpg\"\n",
    "img_path = f\"{PROJECT_NAME}/test_image/baklava.jpg\"\n",
    "\n",
    "\n",
    "img_path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "d32ec266",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 241
    },
    "id": "qLM5JxwEsih9",
    "outputId": "d231442b-e381-4a37-8956-bfd2ce99e012",
    "papermill": {
     "duration": 14.103486,
     "end_time": "2021-10-03T08:25:33.486233",
     "exception": false,
     "start_time": "2021-10-03T08:25:19.382747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=224x224 at 0x7EEBC43F9B10>"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.keras.preprocessing.image.load_img(img_path, target_size = (IMG_HEIGHT, IMG_WIDTH))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "efd6937a",
   "metadata": {
    "id": "3Eynl7n2simr",
    "papermill": {
     "duration": 13.801622,
     "end_time": "2021-10-03T08:26:01.147810",
     "exception": false,
     "start_time": "2021-10-03T08:25:47.346188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def load_img_predict(img_path):\n",
    "    img = tf.keras.preprocessing.image.load_img(img_path, target_size = (IMG_HEIGHT, IMG_WIDTH))\n",
    "    img = tf.keras.preprocessing.image.img_to_array(img)\n",
    "    img = tf.keras.applications.mobilenet_v2.preprocess_input(img)\n",
    "\n",
    "    img = np.expand_dims(img, axis = 0)\n",
    "    \n",
    "    return img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "4093d350",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "tOfTwls9jJKW",
    "outputId": "4d301a7f-4b01-4149-ad3e-a04c43db4cbf",
    "papermill": {
     "duration": 13.89066,
     "end_time": "2021-10-03T08:26:28.939280",
     "exception": false,
     "start_time": "2021-10-03T08:26:15.048620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "mobilenetv2_1.00_224 (Functi (None, 7, 7, 1280)        2257984   \n",
      "_________________________________________________________________\n",
      "global_average_pooling2d_4 ( (None, 1280)              0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 1024)              1311744   \n",
      "_________________________________________________________________\n",
      "classification (Dense)       (None, 101)               103525    \n",
      "=================================================================\n",
      "Total params: 3,673,253\n",
      "Trainable params: 3,639,141\n",
      "Non-trainable params: 34,112\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "#classifier = classifier['MobileNetV2']\n",
    "#classifier = classifier['VGG19']\n",
    "clf_final.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "421aa2e0",
   "metadata": {
    "id": "8xyUQ-MxsoNN",
    "papermill": {
     "duration": 13.600011,
     "end_time": "2021-10-03T08:26:56.378988",
     "exception": false,
     "start_time": "2021-10-03T08:26:42.778977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def predict_image(img_path,classifier):\n",
    "    img = load_img_predict(img_path)\n",
    "    res = classifier.predict(img)\n",
    "\n",
    "    res = sorted (\n",
    "        list(zip ( \n",
    "            list(image_data_gen_train.class_indices.keys())\n",
    "            , np.squeeze(res)\n",
    "         )\n",
    "        )\n",
    "     , key=lambda x: x[1]   \n",
    "     , reverse=True\n",
    "    )\n",
    "    \n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "9048b784",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "HSU62bAHsoUt",
    "outputId": "207ba272-622c-4a79-c5a1-c190317a3088",
    "papermill": {
     "duration": 14.911056,
     "end_time": "2021-10-03T08:27:25.011205",
     "exception": false,
     "start_time": "2021-10-03T08:27:10.100149",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('baklava', 0.99872583),\n",
       " ('apple_pie', 0.0010666575),\n",
       " ('foie_gras', 7.37519e-05),\n",
       " ('carrot_cake', 4.3259242e-05),\n",
       " ('chocolate_cake', 3.8753005e-05),\n",
       " ('chocolate_mousse', 2.1380165e-05),\n",
       " ('bread_pudding', 1.7719083e-05),\n",
       " ('cheesecake', 9.185784e-06),\n",
       " ('panna_cotta', 9.310257e-07),\n",
       " ('ice_cream', 5.3325647e-07),\n",
       " ('cannoli', 5.178747e-07),\n",
       " ('tiramisu', 4.030505e-07),\n",
       " ('churros', 2.0866797e-07),\n",
       " ('peking_duck', 1.6905604e-07),\n",
       " ('cheese_plate', 1.486482e-07)]"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_image(img_path,clf_final)[:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a7def19",
   "metadata": {
    "id": "CU9ACHvSIEnZ",
    "papermill": {
     "duration": 13.817271,
     "end_time": "2021-10-03T08:27:52.589835",
     "exception": false,
     "start_time": "2021-10-03T08:27:38.772564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "97e0b3f0",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "xVz7Xf40tPPP",
    "outputId": "54a4453c-e201-4dfa-bb54-50ff9a2da871",
    "papermill": {
     "duration": 13.773644,
     "end_time": "2021-10-03T08:28:20.148080",
     "exception": false,
     "start_time": "2021-10-03T08:28:06.374436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "End Notebook Time= 19:15:26\n",
      "Time to run this notebook (minutes):  126.03302431666665\n"
     ]
    }
   ],
   "source": [
    "now_end = datetime.now()\n",
    "\n",
    "end_notebook_time = now_end.strftime(\"%H:%M:%S\")\n",
    "print(\"End Notebook Time=\", end_notebook_time)\n",
    "\n",
    "diff2=((now_end - now1).total_seconds() )/ (60)\n",
    "print(\"Time to run this notebook (minutes): \", diff2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "6de4bdca",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "oSIWP2WkwCYv",
    "outputId": "a7825a4e-5117-43c5-d0aa-4387efe2b84b",
    "papermill": {
     "duration": 13.759301,
     "end_time": "2021-10-03T08:28:47.548294",
     "exception": false,
     "start_time": "2021-10-03T08:28:33.788993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of classes used in dataset: 102\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of classes used in dataset:\", subset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6aa4c013",
   "metadata": {
    "id": "MoU3KdDSWKZa",
    "papermill": {
     "duration": 13.965975,
     "end_time": "2021-10-03T08:29:15.282287",
     "exception": false,
     "start_time": "2021-10-03T08:29:01.316312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49062a08-79c5-453a-a8e5-2054ca3bc94f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28e4908e-d026-471e-ae38-9a1e3636c426",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f4aca27-486f-48b4-a7f6-aa497a9dbd2f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "2021_09-20_1_run_dl_model_101_classes.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "environment": {
   "name": "tf2-gpu.2-3.m80",
   "type": "gcloud",
   "uri": "gcr.io/deeplearning-platform-release/tf2-gpu.2-3:m80"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13853.066824,
   "end_time": "2021-10-03T08:29:32.937531",
   "environment_variables": {},
   "exception": null,
   "input_path": "simple.ipynb",
   "output_path": "output.ipynb",
   "parameters": {},
   "start_time": "2021-10-03T04:38:39.870707",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
